// Code generated by Wire. DO NOT EDIT.

//+build !wireinject

package main

import (
	"context"
	"fmt"
	"github.com/facebookincubator/symphony/pkg/log"
	"github.com/facebookincubator/symphony/pkg/mysql"
	"github.com/facebookincubator/symphony/pkg/server"
	viewer2 "github.com/facebookincubator/symphony/pkg/viewer"
	"github.com/net-auto/resourceManager/ent"
	"github.com/net-auto/resourceManager/graph/graphhttp"
	"github.com/net-auto/resourceManager/viewer"
	"gocloud.dev/server/health"
)

import (
	_ "github.com/net-auto/resourceManager/ent/runtime"
)

// Injectors from wire.go:

func newApplication(ctx context.Context, flags *cliFlags) (*application, func(), error) {
	config := flags.LogConfig
	logger, cleanup, err := log.ProvideLogger(config)
	if err != nil {
		return nil, nil, err
	}
	mysqlConfig := flags.MySQLConfig
	viewerConfig := flags.TenancyConfig
	mySQLTenancy, err := newMySQLTenancy(mysqlConfig, viewerConfig, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	tenancy, err := newTenancy(mySQLTenancy)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	telemetryConfig := &flags.TelemetryConfig
	v := newHealthChecks(mySQLTenancy)
	graphhttpConfig := graphhttp.Config{
		Tenancy:      tenancy,
		Logger:       logger,
		Telemetry:    telemetryConfig,
		HealthChecks: v,
	}
	server, cleanup2, err := graphhttp.NewServer(graphhttpConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	mainApplication := newApp(logger, server, flags)
	return mainApplication, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func newApp(logger log.Logger, httpServer *server.Server, flags *cliFlags) *application {
	var app application
	app.Logger = logger.Background()
	app.http.Server = httpServer
	app.http.addr = flags.HTTPAddr
	return &app
}

func newTenancy(tenancy *viewer.MySQLTenancy) (viewer.Tenancy, error) {
	initFunc := func(*ent.Client) {

	}
	return viewer.NewCacheTenancy(tenancy, initFunc), nil
}

func newHealthChecks(tenancy *viewer.MySQLTenancy) []health.Checker {
	return []health.Checker{tenancy}
}

func newMySQLTenancy(config mysql.Config, tenancyConfig viewer2.Config, logger log.Logger) (*viewer.MySQLTenancy, error) {
	tenancy, err := viewer.NewMySQLTenancy(config.String(), tenancyConfig.TenantMaxConn)
	if err != nil {
		return nil, fmt.Errorf("creating mysql tenancy: %w", err)
	}
	tenancy.SetLogger(logger)
	mysql.SetLogger(logger)
	return tenancy, nil
}
