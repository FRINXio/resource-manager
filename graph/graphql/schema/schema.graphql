directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

enum PoolType
@goModel(
    model: "github.com/net-auto/resourceManager/ent/resourcepool.PoolType"
)
{
    set
    singleton
}

scalar Map

type Resource
@goModel(model: "github.com/net-auto/resourceManager/ent.Resource")
{
    ID: Int!
    Properties: Map!
}

type PropertyType
@goModel(model: "github.com/net-auto/resourceManager/ent.PropertyType"){
    ID: Int!
    Name: String!
    Type: String!,
    IntVal: Int!,
    StringVal: String!,
    FloatVal: Float!,
    Mandatory: Boolean!
}

type ResourcePool
@goModel(model: "github.com/net-auto/resourceManager/ent.ResourcePool"){
    ID: Int!
    Name: String!
    PoolType: PoolType!
    Edges: ResourcePoolEdges
}

type Label
@goModel(model: "github.com/net-auto/resourceManager/ent.Label"){
    ID: Int!
    Labl: String!
}

enum AllocationStrategyLang
@goModel(
    model: "github.com/net-auto/resourceManager/ent/allocationstrategy.Lang"
)
{
    js
    py
}


type AllocationStrategy
@goModel(model: "github.com/net-auto/resourceManager/ent.AllocationStrategy"){
    ID: Int!
    Name: String!
    Lang: AllocationStrategyLang!
    Script: String!
}

type ResourcePoolEdges
@goModel(model: "github.com/net-auto/resourceManager/ent.ResourcePoolEdges"){
    ResourceType: ResourceType!
    Labels: Label
    AllocationStrategy: AllocationStrategy
}

type ResourceTypeEdges
@goModel(model: "github.com/net-auto/resourceManager/ent.ResourceTypeEdges"){
    PropertyTypes: [PropertyType]
    Pools: [ResourcePool]
}

type ResourceType
@goModel(model: "github.com/net-auto/resourceManager/ent.ResourceType"){
    ID: Int!
    Name: String!
    Edges: ResourceTypeEdges
}

type Query {
    QueryResource(input: Map!, poolName: String!): Resource!
    QueryResources(poolName: String!): [Resource]!
    QueryAllocationStrategy(allocationStrategyName: String!): AllocationStrategy!
    QueryAllocationStrategies: [AllocationStrategy]!
    QueryResourceTypes: [ResourceType]!
    QueryResourcePools: [ResourcePool]!
}

#TODO missing CRUD for pools <-> labels

type Mutation {
    # Allocation strategy
    CreateAllocationStrategy(name: String!, script: String!): AllocationStrategy!
    DeleteAllocationStrategy(allocationStrategyId: Int!): AllocationStrategy!

    # managing resources via pools
    ClaimResource(poolName: String!): Resource!
    FreeResource(input: Map!, poolName: String!): String!

    # create/update/delete resource pool
    CreateSetPool(resourceTypeId: Int!, poolName: String!, poolValues: [Map]): ResourcePool!
    CreateSingletonPool(resourceTypeId: Int!, poolName: String!, poolValues: [Map]): ResourcePool!
    CreateAllocatingPool(resourceTypeId: Int!, poolName: String!, allocationStrategyId: Int!): ResourcePool!
    DeleteResourcePool(resourcePoolId: Int!): String!

    # create/update/delete resource type
    ## resourceName: String! - name of the resource type AND property type (should they be different?)
    ## resourceProperties: Map! - for key "init" the value is the initial value of the property type (like 7)
    ##                            for key "type" the value is the name of the type like "int"
    CreateResourceType(resourceName: String!, resourceProperties: Map!): ResourceType!
    DeleteResourceType(resourceTypeId: Int!): String!
    ## it only changes the name of the resource type
    UpdateResourceTypeName(resourceTypeId: Int!, resourceName: String!): ResourceType!
}