// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package resolver

import (
	"context"
	"fmt"

	"github.com/net-auto/resourceManager/graph/graphql/generated"
	"github.com/net-auto/resourceManager/ent"
	"github.com/net-auto/resourceManager/graph/graphql/model"
)

// txResolver wraps a mutation resolver and executes every mutation under a transaction.
type txResolver struct {
	generated.MutationResolver
}

func (tr txResolver) WithTransaction(ctx context.Context, f func(context.Context, generated.MutationResolver) error) error {
	tx, err := ent.FromContext(ctx).Tx(ctx)
	if err != nil {
		return fmt.Errorf("creating transaction: %w", err)
	}
	ctx = ent.NewTxContext(ctx, tx)
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
			panic(r)
		}
	}()
	ctx = ent.NewContext(ctx, tx.Client())
	if err := f(ctx, tr.MutationResolver); err != nil {
		if r := tx.Rollback(); r != nil {
			err = fmt.Errorf("rolling back transaction: %v", r)
		}
		return err
	}
	if err := tx.Commit(); err != nil {
		return fmt.Errorf("committing transaction: %w", err)
	}
	return nil
}

func (tr txResolver) CreateTag(ctx context.Context, input model.CreateTagInput) (*model.CreateTagPayload, error) {
	var result, zero *model.CreateTagPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.CreateTag(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) UpdateTag(ctx context.Context, input model.UpdateTagInput) (*model.UpdateTagPayload, error) {
	var result, zero *model.UpdateTagPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.UpdateTag(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) DeleteTag(ctx context.Context, input model.DeleteTagInput) (*model.DeleteTagPayload, error) {
	var result, zero *model.DeleteTagPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.DeleteTag(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) TagPool(ctx context.Context, input model.TagPoolInput) (*model.TagPoolPayload, error) {
	var result, zero *model.TagPoolPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.TagPool(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) UntagPool(ctx context.Context, input model.UntagPoolInput) (*model.UntagPoolPayload, error) {
	var result, zero *model.UntagPoolPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.UntagPool(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) CreateAllocationStrategy(ctx context.Context, input *model.CreateAllocationStrategyInput) (*model.CreateAllocationStrategyPayload, error) {
	var result, zero *model.CreateAllocationStrategyPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.CreateAllocationStrategy(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) DeleteAllocationStrategy(ctx context.Context, input *model.DeleteAllocationStrategyInput) (*model.DeleteAllocationStrategyPayload, error) {
	var result, zero *model.DeleteAllocationStrategyPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.DeleteAllocationStrategy(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) TestAllocationStrategy(ctx context.Context, allocationStrategyID int, resourcePool model.ResourcePoolInput, currentResources []*model.ResourceInput, userInput map[string]interface{}) (map[string]interface{}, error) {
	var result, zero map[string]interface{}
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.TestAllocationStrategy(ctx, allocationStrategyID, resourcePool, currentResources, userInput)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) ClaimResource(ctx context.Context, poolID int, userInput map[string]interface{}) (*ent.Resource, error) {
	var result, zero *ent.Resource
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.ClaimResource(ctx, poolID, userInput)
		return
	}); err != nil {
		return zero, err
	}
	if result != nil {
		result = result.Unwrap()
	}
	return result, nil
}

func (tr txResolver) FreeResource(ctx context.Context, input map[string]interface{}, poolID int) (string, error) {
	var result, zero string
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.FreeResource(ctx, input, poolID)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) CreateSetPool(ctx context.Context, input model.CreateSetPoolInput) (*model.CreateSetPoolPayload, error) {
	var result, zero *model.CreateSetPoolPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.CreateSetPool(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) CreateNestedSetPool(ctx context.Context, input model.CreateNestedSetPoolInput) (*model.CreateNestedSetPoolPayload, error) {
	var result, zero *model.CreateNestedSetPoolPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.CreateNestedSetPool(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) CreateSingletonPool(ctx context.Context, input *model.CreateSingletonPoolInput) (*model.CreateSingletonPoolPayload, error) {
	var result, zero *model.CreateSingletonPoolPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.CreateSingletonPool(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) CreateNestedSingletonPool(ctx context.Context, input model.CreateNestedSingletonPoolInput) (*model.CreateNestedSingletonPoolPayload, error) {
	var result, zero *model.CreateNestedSingletonPoolPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.CreateNestedSingletonPool(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) CreateAllocatingPool(ctx context.Context, input *model.CreateAllocatingPoolInput) (*model.CreateAllocatingPoolPayload, error) {
	var result, zero *model.CreateAllocatingPoolPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.CreateAllocatingPool(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) CreateNestedAllocatingPool(ctx context.Context, input model.CreateNestedAllocatingPoolInput) (*model.CreateNestedAllocatingPoolPayload, error) {
	var result, zero *model.CreateNestedAllocatingPoolPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.CreateNestedAllocatingPool(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) DeleteResourcePool(ctx context.Context, input model.DeleteResourcePoolInput) (*model.DeleteResourcePoolPayload, error) {
	var result, zero *model.DeleteResourcePoolPayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.DeleteResourcePool(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) CreateResourceType(ctx context.Context, input model.CreateResourceTypeInput) (*model.CreateResourceTypePayload, error) {
	var result, zero *model.CreateResourceTypePayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.CreateResourceType(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) DeleteResourceType(ctx context.Context, input model.DeleteResourceTypeInput) (*model.DeleteResourceTypePayload, error) {
	var result, zero *model.DeleteResourceTypePayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.DeleteResourceType(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}

func (tr txResolver) UpdateResourceTypeName(ctx context.Context, input model.UpdateResourceTypeNameInput) (*model.UpdateResourceTypeNamePayload, error) {
	var result, zero *model.UpdateResourceTypeNamePayload
	if err := tr.WithTransaction(ctx, func(ctx context.Context, mr generated.MutationResolver) (err error) {
		result, err = mr.UpdateResourceTypeName(ctx, input)
		return
	}); err != nil {
		return zero, err
	}
	return result, nil
}
