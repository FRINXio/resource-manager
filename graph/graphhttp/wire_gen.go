// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package graphhttp

import (
	"github.com/facebookincubator/symphony/pkg/log"
	"github.com/facebookincubator/symphony/pkg/mysql"
	"github.com/facebookincubator/symphony/pkg/server"
	"github.com/facebookincubator/symphony/pkg/server/xserver"
	"github.com/facebookincubator/symphony/pkg/telemetry"
	"github.com/net-auto/resourceManager/viewer"
	"go.opencensus.io/stats/view"
	"gocloud.dev/server/health"
)

// Injectors from wire.go:

func NewServer(cfg Config) (*server.Server, func(), error) {
	graphhttpRouterConfig, err := newRouterConfig(cfg)
	if err != nil {
		return nil, nil, err
	}
	router, cleanup, err := newRouter(graphhttpRouterConfig)
	if err != nil {
		return nil, nil, err
	}
	logger := cfg.Logger
	zapLogger := xserver.NewRequestLogger(logger)
	v := cfg.HealthChecks
	v2 := provideViews()
	config := cfg.Telemetry
	exporter, err := telemetry.ProvideViewExporter(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	traceExporter, cleanup2, err := telemetry.ProvideTraceExporter(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	profilingEnabler := _wireProfilingEnablerValue
	sampler := telemetry.ProvideTraceSampler(config)
	handlerFunc := xserver.NewRecoveryHandler(logger)
	defaultDriver := _wireDefaultDriverValue
	options := &server.Options{
		RequestLogger:         zapLogger,
		HealthChecks:          v,
		Views:                 v2,
		ViewExporter:          exporter,
		TraceExporter:         traceExporter,
		EnableProfiling:       profilingEnabler,
		DefaultSamplingPolicy: sampler,
		RecoveryHandler:       handlerFunc,
		Driver:                defaultDriver,
	}
	serverServer := server.New(router, options)
	return serverServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireProfilingEnablerValue = server.ProfilingEnabler(true)
	_wireDefaultDriverValue    = &server.DefaultDriver{}
)

// wire.go:

// Config defines the http server config.
type Config struct {
	Tenancy      viewer.Tenancy
	Logger       log.Logger
	Telemetry    *telemetry.Config
	HealthChecks []health.Checker
}

func newRouterConfig(config Config) (cfg routerConfig, err error) {
	cfg = routerConfig{logger: config.Logger}
	cfg.viewer.tenancy = config.Tenancy
	return cfg, nil
}

func provideViews() []*view.View {
	views := xserver.DefaultViews()
	views = append(views, mysql.DefaultViews...)
	return views
}
