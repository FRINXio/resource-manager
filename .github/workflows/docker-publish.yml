name: Docker

on:
  workflow_dispatch:
  push:
    # Publish `master` and `stable` as Docker `latest` image.
    branches:
      - 'master'
      - '[0-9]+.X-stable'

    # Publish `v1.2.3` tags as releases.
    tags:
      - 'v*'
      - 'v[0-9]+.[0-9]+.[0-9]-stable'

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: frinx/resource-manager
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version: '1.18.6'
      - uses: actions/setup-node@v2-beta
        with:
          node-version: 16
      - run: npm install -g yarn
      - name: Build image
        run: docker build --build-arg GITHUB_TOKEN_EXTERNAL_DOCKERFILE=${{ secrets.TOKEN }} . --file Dockerfile-testing --tag ${IMAGE_NAME}-testing
      - name: Run unit-test
        run: |
          export GITHUB_TOKEN_EXTERNAL=${{ secrets.TOKEN }}
          go test -v -short ./pools/...
      - name: Run integration-test
        run: ./integration-test.sh
      - name: Run api-test
        run: api-tests/test.sh yarn test

  push:
    # Ensure unit-test job passes before pushing image.
    # FIXME depend on integration-test
    needs: tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      #### Set tags based on source type ####

      - name: Set tag and hive token for latest image
        if: github.ref_type == 'branch' && startsWith(github.ref, 'refs/heads/master')
        run: |
          echo "IMAGE_TAG=$(echo 'latest')" >> "$GITHUB_ENV"
          echo "HIVE_TOKEN=${{ secrets.HIVE_MASTER_LATEST_TOKEN }}" >> "$GITHUB_ENV"

      - name: Set tag and hive token for stable-latest image
        if: github.ref_type == 'branch' && endsWith(github.ref, '-stable')
        run: |
          echo "IMAGE_TAG=$(echo 'stable-latest')" >> "$GITHUB_ENV"
          echo "HIVE_TOKEN=${{ secrets.HIVE_STABLE_LATEST_TOKEN }}" >> "$GITHUB_ENV"

      - name: Set tag and hive token for stable-release image
        if: github.ref_type == 'tag' && endsWith(github.ref, '-stable')
        run: |
          echo "IMAGE_TAG=$(echo $GITHUB_REF | cut -d / -f 3 | sed -e 's/^v-//' | sed -e 's/-stable//')" >> "$GITHUB_ENV"
          echo "HIVE_TOKEN=${{ secrets.HIVE_STABLE_RELEASE_TOKEN }}" >> "$GITHUB_ENV"

      - name: Set tag and hive token for release image
        if: ${{ github.ref_type == 'tag' && !endsWith(github.ref, '-stable') }}
        run: |
          echo "IMAGE_TAG=$(echo $GITHUB_REF | cut -d / -f 3 | sed -e 's/^v-//')" >> "$GITHUB_ENV"
          echo "HIVE_TOKEN=${{ secrets.HIVE_MASTER_RELEASE_TOKEN }}" >> "$GITHUB_ENV"

      - name: Build image
        run: |
          docker build --build-arg GITHUB_TOKEN_EXTERNAL_DOCKERFILE=${{ secrets.TOKEN }} \
          --build-arg git_commit=$(git rev-parse HEAD) . --file Dockerfile --tag $IMAGE_NAME:${IMAGE_TAG}

      - name: Log into docker hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Push image
        run: |
          docker push $IMAGE_NAME:${IMAGE_TAG}

      - name: Hive publish
        env:
          SCHEMA_PATH: "graph/graphql/schema/schema.graphql"
        run: |
          curl -sSL https://graphql-hive.com/install.sh | sh
          hive schema:publish ${{ env.SCHEMA_PATH }} \
            --registry.accessToken ${HIVE_TOKEN} \
            --github

  bench:
    # Ensure benchmarks are not broken.
    # Runs after push, so only on master to avoid slowing down PR checks.
    needs: push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2-beta
        with:
          node-version: 16
      - run: npm install -g yarn
      - name: Run benchmarks
        run: api-tests/test.sh yarn bench
