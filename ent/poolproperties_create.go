// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/net-auto/resourceManager/ent/poolproperties"
	"github.com/net-auto/resourceManager/ent/property"
	"github.com/net-auto/resourceManager/ent/resourcepool"
	"github.com/net-auto/resourceManager/ent/resourcetype"
)

// PoolPropertiesCreate is the builder for creating a PoolProperties entity.
type PoolPropertiesCreate struct {
	config
	mutation *PoolPropertiesMutation
	hooks    []Hook
}

// SetPoolID sets the pool edge to ResourcePool by id.
func (ppc *PoolPropertiesCreate) SetPoolID(id int) *PoolPropertiesCreate {
	ppc.mutation.SetPoolID(id)
	return ppc
}

// SetNillablePoolID sets the pool edge to ResourcePool by id if the given value is not nil.
func (ppc *PoolPropertiesCreate) SetNillablePoolID(id *int) *PoolPropertiesCreate {
	if id != nil {
		ppc = ppc.SetPoolID(*id)
	}
	return ppc
}

// SetPool sets the pool edge to ResourcePool.
func (ppc *PoolPropertiesCreate) SetPool(r *ResourcePool) *PoolPropertiesCreate {
	return ppc.SetPoolID(r.ID)
}

// AddResourceTypeIDs adds the resourceType edge to ResourceType by ids.
func (ppc *PoolPropertiesCreate) AddResourceTypeIDs(ids ...int) *PoolPropertiesCreate {
	ppc.mutation.AddResourceTypeIDs(ids...)
	return ppc
}

// AddResourceType adds the resourceType edges to ResourceType.
func (ppc *PoolPropertiesCreate) AddResourceType(r ...*ResourceType) *PoolPropertiesCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ppc.AddResourceTypeIDs(ids...)
}

// AddPropertyIDs adds the properties edge to Property by ids.
func (ppc *PoolPropertiesCreate) AddPropertyIDs(ids ...int) *PoolPropertiesCreate {
	ppc.mutation.AddPropertyIDs(ids...)
	return ppc
}

// AddProperties adds the properties edges to Property.
func (ppc *PoolPropertiesCreate) AddProperties(p ...*Property) *PoolPropertiesCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppc.AddPropertyIDs(ids...)
}

// Mutation returns the PoolPropertiesMutation object of the builder.
func (ppc *PoolPropertiesCreate) Mutation() *PoolPropertiesMutation {
	return ppc.mutation
}

// Save creates the PoolProperties in the database.
func (ppc *PoolPropertiesCreate) Save(ctx context.Context) (*PoolProperties, error) {
	var (
		err  error
		node *PoolProperties
	)
	if len(ppc.hooks) == 0 {
		if err = ppc.check(); err != nil {
			return nil, err
		}
		node, err = ppc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PoolPropertiesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ppc.check(); err != nil {
				return nil, err
			}
			ppc.mutation = mutation
			node, err = ppc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ppc.hooks) - 1; i >= 0; i-- {
			mut = ppc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ppc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *PoolPropertiesCreate) SaveX(ctx context.Context) *PoolProperties {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ppc *PoolPropertiesCreate) check() error {
	return nil
}

func (ppc *PoolPropertiesCreate) sqlSave(ctx context.Context) (*PoolProperties, error) {
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ppc *PoolPropertiesCreate) createSpec() (*PoolProperties, *sqlgraph.CreateSpec) {
	var (
		_node = &PoolProperties{config: ppc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: poolproperties.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: poolproperties.FieldID,
			},
		}
	)
	if nodes := ppc.mutation.PoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   poolproperties.PoolTable,
			Columns: []string{poolproperties.PoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcepool.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.ResourceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poolproperties.ResourceTypeTable,
			Columns: []string{poolproperties.ResourceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poolproperties.PropertiesTable,
			Columns: []string{poolproperties.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: property.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PoolPropertiesCreateBulk is the builder for creating a bulk of PoolProperties entities.
type PoolPropertiesCreateBulk struct {
	config
	builders []*PoolPropertiesCreate
}

// Save creates the PoolProperties entities in the database.
func (ppcb *PoolPropertiesCreateBulk) Save(ctx context.Context) ([]*PoolProperties, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*PoolProperties, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PoolPropertiesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ppcb *PoolPropertiesCreateBulk) SaveX(ctx context.Context) []*PoolProperties {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
