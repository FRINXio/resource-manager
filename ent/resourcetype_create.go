// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/net-auto/resourceManager/ent/poolproperties"
	"github.com/net-auto/resourceManager/ent/propertytype"
	"github.com/net-auto/resourceManager/ent/resourcepool"
	"github.com/net-auto/resourceManager/ent/resourcetype"
)

// ResourceTypeCreate is the builder for creating a ResourceType entity.
type ResourceTypeCreate struct {
	config
	mutation *ResourceTypeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rtc *ResourceTypeCreate) SetName(s string) *ResourceTypeCreate {
	rtc.mutation.SetName(s)
	return rtc
}

// AddPropertyTypeIDs adds the "property_types" edge to the PropertyType entity by IDs.
func (rtc *ResourceTypeCreate) AddPropertyTypeIDs(ids ...int) *ResourceTypeCreate {
	rtc.mutation.AddPropertyTypeIDs(ids...)
	return rtc
}

// AddPropertyTypes adds the "property_types" edges to the PropertyType entity.
func (rtc *ResourceTypeCreate) AddPropertyTypes(p ...*PropertyType) *ResourceTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtc.AddPropertyTypeIDs(ids...)
}

// AddPoolIDs adds the "pools" edge to the ResourcePool entity by IDs.
func (rtc *ResourceTypeCreate) AddPoolIDs(ids ...int) *ResourceTypeCreate {
	rtc.mutation.AddPoolIDs(ids...)
	return rtc
}

// AddPools adds the "pools" edges to the ResourcePool entity.
func (rtc *ResourceTypeCreate) AddPools(r ...*ResourcePool) *ResourceTypeCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtc.AddPoolIDs(ids...)
}

// AddPoolPropertyIDs adds the "pool_properties" edge to the PoolProperties entity by IDs.
func (rtc *ResourceTypeCreate) AddPoolPropertyIDs(ids ...int) *ResourceTypeCreate {
	rtc.mutation.AddPoolPropertyIDs(ids...)
	return rtc
}

// AddPoolProperties adds the "pool_properties" edges to the PoolProperties entity.
func (rtc *ResourceTypeCreate) AddPoolProperties(p ...*PoolProperties) *ResourceTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtc.AddPoolPropertyIDs(ids...)
}

// Mutation returns the ResourceTypeMutation object of the builder.
func (rtc *ResourceTypeCreate) Mutation() *ResourceTypeMutation {
	return rtc.mutation
}

// Save creates the ResourceType in the database.
func (rtc *ResourceTypeCreate) Save(ctx context.Context) (*ResourceType, error) {
	var (
		err  error
		node *ResourceType
	)
	if len(rtc.hooks) == 0 {
		if err = rtc.check(); err != nil {
			return nil, err
		}
		node, err = rtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtc.check(); err != nil {
				return nil, err
			}
			rtc.mutation = mutation
			if node, err = rtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rtc.hooks) - 1; i >= 0; i-- {
			if rtc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rtc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rtc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ResourceType)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ResourceTypeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rtc *ResourceTypeCreate) SaveX(ctx context.Context) *ResourceType {
	v, err := rtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtc *ResourceTypeCreate) Exec(ctx context.Context) error {
	_, err := rtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtc *ResourceTypeCreate) ExecX(ctx context.Context) {
	if err := rtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtc *ResourceTypeCreate) check() error {
	if _, ok := rtc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ResourceType.name"`)}
	}
	if v, ok := rtc.mutation.Name(); ok {
		if err := resourcetype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ResourceType.name": %w`, err)}
		}
	}
	return nil
}

func (rtc *ResourceTypeCreate) sqlSave(ctx context.Context) (*ResourceType, error) {
	_node, _spec := rtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rtc *ResourceTypeCreate) createSpec() (*ResourceType, *sqlgraph.CreateSpec) {
	var (
		_node = &ResourceType{config: rtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: resourcetype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcetype.FieldID,
			},
		}
	)
	if value, ok := rtc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcetype.FieldName,
		})
		_node.Name = value
	}
	if nodes := rtc.mutation.PropertyTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.PropertyTypesTable,
			Columns: []string{resourcetype.PropertyTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: propertytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtc.mutation.PoolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcetype.PoolsTable,
			Columns: []string{resourcetype.PoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcepool.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtc.mutation.PoolPropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resourcetype.PoolPropertiesTable,
			Columns: resourcetype.PoolPropertiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: poolproperties.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ResourceTypeCreateBulk is the builder for creating many ResourceType entities in bulk.
type ResourceTypeCreateBulk struct {
	config
	builders []*ResourceTypeCreate
}

// Save creates the ResourceType entities in the database.
func (rtcb *ResourceTypeCreateBulk) Save(ctx context.Context) ([]*ResourceType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rtcb.builders))
	nodes := make([]*ResourceType, len(rtcb.builders))
	mutators := make([]Mutator, len(rtcb.builders))
	for i := range rtcb.builders {
		func(i int, root context.Context) {
			builder := rtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtcb *ResourceTypeCreateBulk) SaveX(ctx context.Context) []*ResourceType {
	v, err := rtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtcb *ResourceTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := rtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcb *ResourceTypeCreateBulk) ExecX(ctx context.Context) {
	if err := rtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
