// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/net-auto/resourceManager/ent/allocationstrategy"
	"github.com/net-auto/resourceManager/ent/poolproperties"
	"github.com/net-auto/resourceManager/ent/property"
	"github.com/net-auto/resourceManager/ent/propertytype"
	"github.com/net-auto/resourceManager/ent/resource"
	"github.com/net-auto/resourceManager/ent/resourcepool"
	"github.com/net-auto/resourceManager/ent/resourcetype"
	"github.com/net-auto/resourceManager/ent/tag"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AllocationStrategyEdge is the edge representation of AllocationStrategy.
type AllocationStrategyEdge struct {
	Node   *AllocationStrategy `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

// AllocationStrategyConnection is the connection containing edges to AllocationStrategy.
type AllocationStrategyConnection struct {
	Edges      []*AllocationStrategyEdge `json:"edges"`
	PageInfo   PageInfo                  `json:"pageInfo"`
	TotalCount int                       `json:"totalCount"`
}

func (c *AllocationStrategyConnection) build(nodes []*AllocationStrategy, pager *allocationstrategyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AllocationStrategy
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AllocationStrategy {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AllocationStrategy {
			return nodes[i]
		}
	}
	c.Edges = make([]*AllocationStrategyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AllocationStrategyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AllocationStrategyPaginateOption enables pagination customization.
type AllocationStrategyPaginateOption func(*allocationstrategyPager) error

// WithAllocationStrategyOrder configures pagination ordering.
func WithAllocationStrategyOrder(order *AllocationStrategyOrder) AllocationStrategyPaginateOption {
	if order == nil {
		order = DefaultAllocationStrategyOrder
	}
	o := *order
	return func(pager *allocationstrategyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAllocationStrategyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAllocationStrategyFilter configures pagination filter.
func WithAllocationStrategyFilter(filter func(*AllocationStrategyQuery) (*AllocationStrategyQuery, error)) AllocationStrategyPaginateOption {
	return func(pager *allocationstrategyPager) error {
		if filter == nil {
			return errors.New("AllocationStrategyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type allocationstrategyPager struct {
	order  *AllocationStrategyOrder
	filter func(*AllocationStrategyQuery) (*AllocationStrategyQuery, error)
}

func newAllocationStrategyPager(opts []AllocationStrategyPaginateOption) (*allocationstrategyPager, error) {
	pager := &allocationstrategyPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAllocationStrategyOrder
	}
	return pager, nil
}

func (p *allocationstrategyPager) applyFilter(query *AllocationStrategyQuery) (*AllocationStrategyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *allocationstrategyPager) toCursor(as *AllocationStrategy) Cursor {
	return p.order.Field.toCursor(as)
}

func (p *allocationstrategyPager) applyCursors(query *AllocationStrategyQuery, after, before *Cursor) *AllocationStrategyQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAllocationStrategyOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *allocationstrategyPager) applyOrder(query *AllocationStrategyQuery, reverse bool) *AllocationStrategyQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAllocationStrategyOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAllocationStrategyOrder.Field.field))
	}
	return query
}

func (p *allocationstrategyPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAllocationStrategyOrder.Field {
			b.Comma().Ident(DefaultAllocationStrategyOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AllocationStrategy.
func (as *AllocationStrategyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AllocationStrategyPaginateOption,
) (*AllocationStrategyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAllocationStrategyPager(opts)
	if err != nil {
		return nil, err
	}
	if as, err = pager.applyFilter(as); err != nil {
		return nil, err
	}
	conn := &AllocationStrategyConnection{Edges: []*AllocationStrategyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = as.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	as = pager.applyCursors(as, after, before)
	as = pager.applyOrder(as, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		as.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := as.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := as.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AllocationStrategyOrderField defines the ordering field of AllocationStrategy.
type AllocationStrategyOrderField struct {
	field    string
	toCursor func(*AllocationStrategy) Cursor
}

// AllocationStrategyOrder defines the ordering of AllocationStrategy.
type AllocationStrategyOrder struct {
	Direction OrderDirection                `json:"direction"`
	Field     *AllocationStrategyOrderField `json:"field"`
}

// DefaultAllocationStrategyOrder is the default ordering of AllocationStrategy.
var DefaultAllocationStrategyOrder = &AllocationStrategyOrder{
	Direction: OrderDirectionAsc,
	Field: &AllocationStrategyOrderField{
		field: allocationstrategy.FieldID,
		toCursor: func(as *AllocationStrategy) Cursor {
			return Cursor{ID: as.ID}
		},
	},
}

// ToEdge converts AllocationStrategy into AllocationStrategyEdge.
func (as *AllocationStrategy) ToEdge(order *AllocationStrategyOrder) *AllocationStrategyEdge {
	if order == nil {
		order = DefaultAllocationStrategyOrder
	}
	return &AllocationStrategyEdge{
		Node:   as,
		Cursor: order.Field.toCursor(as),
	}
}

// PoolPropertiesEdge is the edge representation of PoolProperties.
type PoolPropertiesEdge struct {
	Node   *PoolProperties `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// PoolPropertiesConnection is the connection containing edges to PoolProperties.
type PoolPropertiesConnection struct {
	Edges      []*PoolPropertiesEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

func (c *PoolPropertiesConnection) build(nodes []*PoolProperties, pager *poolpropertiesPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PoolProperties
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PoolProperties {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PoolProperties {
			return nodes[i]
		}
	}
	c.Edges = make([]*PoolPropertiesEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PoolPropertiesEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PoolPropertiesPaginateOption enables pagination customization.
type PoolPropertiesPaginateOption func(*poolpropertiesPager) error

// WithPoolPropertiesOrder configures pagination ordering.
func WithPoolPropertiesOrder(order *PoolPropertiesOrder) PoolPropertiesPaginateOption {
	if order == nil {
		order = DefaultPoolPropertiesOrder
	}
	o := *order
	return func(pager *poolpropertiesPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPoolPropertiesOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPoolPropertiesFilter configures pagination filter.
func WithPoolPropertiesFilter(filter func(*PoolPropertiesQuery) (*PoolPropertiesQuery, error)) PoolPropertiesPaginateOption {
	return func(pager *poolpropertiesPager) error {
		if filter == nil {
			return errors.New("PoolPropertiesQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type poolpropertiesPager struct {
	order  *PoolPropertiesOrder
	filter func(*PoolPropertiesQuery) (*PoolPropertiesQuery, error)
}

func newPoolPropertiesPager(opts []PoolPropertiesPaginateOption) (*poolpropertiesPager, error) {
	pager := &poolpropertiesPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPoolPropertiesOrder
	}
	return pager, nil
}

func (p *poolpropertiesPager) applyFilter(query *PoolPropertiesQuery) (*PoolPropertiesQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *poolpropertiesPager) toCursor(pp *PoolProperties) Cursor {
	return p.order.Field.toCursor(pp)
}

func (p *poolpropertiesPager) applyCursors(query *PoolPropertiesQuery, after, before *Cursor) *PoolPropertiesQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultPoolPropertiesOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *poolpropertiesPager) applyOrder(query *PoolPropertiesQuery, reverse bool) *PoolPropertiesQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultPoolPropertiesOrder.Field {
		query = query.Order(direction.orderFunc(DefaultPoolPropertiesOrder.Field.field))
	}
	return query
}

func (p *poolpropertiesPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPoolPropertiesOrder.Field {
			b.Comma().Ident(DefaultPoolPropertiesOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PoolProperties.
func (pp *PoolPropertiesQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PoolPropertiesPaginateOption,
) (*PoolPropertiesConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPoolPropertiesPager(opts)
	if err != nil {
		return nil, err
	}
	if pp, err = pager.applyFilter(pp); err != nil {
		return nil, err
	}
	conn := &PoolPropertiesConnection{Edges: []*PoolPropertiesEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pp.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	pp = pager.applyCursors(pp, after, before)
	pp = pager.applyOrder(pp, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		pp.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pp.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := pp.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PoolPropertiesOrderField defines the ordering field of PoolProperties.
type PoolPropertiesOrderField struct {
	field    string
	toCursor func(*PoolProperties) Cursor
}

// PoolPropertiesOrder defines the ordering of PoolProperties.
type PoolPropertiesOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *PoolPropertiesOrderField `json:"field"`
}

// DefaultPoolPropertiesOrder is the default ordering of PoolProperties.
var DefaultPoolPropertiesOrder = &PoolPropertiesOrder{
	Direction: OrderDirectionAsc,
	Field: &PoolPropertiesOrderField{
		field: poolproperties.FieldID,
		toCursor: func(pp *PoolProperties) Cursor {
			return Cursor{ID: pp.ID}
		},
	},
}

// ToEdge converts PoolProperties into PoolPropertiesEdge.
func (pp *PoolProperties) ToEdge(order *PoolPropertiesOrder) *PoolPropertiesEdge {
	if order == nil {
		order = DefaultPoolPropertiesOrder
	}
	return &PoolPropertiesEdge{
		Node:   pp,
		Cursor: order.Field.toCursor(pp),
	}
}

// PropertyEdge is the edge representation of Property.
type PropertyEdge struct {
	Node   *Property `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// PropertyConnection is the connection containing edges to Property.
type PropertyConnection struct {
	Edges      []*PropertyEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *PropertyConnection) build(nodes []*Property, pager *propertyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Property
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Property {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Property {
			return nodes[i]
		}
	}
	c.Edges = make([]*PropertyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PropertyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PropertyPaginateOption enables pagination customization.
type PropertyPaginateOption func(*propertyPager) error

// WithPropertyOrder configures pagination ordering.
func WithPropertyOrder(order *PropertyOrder) PropertyPaginateOption {
	if order == nil {
		order = DefaultPropertyOrder
	}
	o := *order
	return func(pager *propertyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPropertyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPropertyFilter configures pagination filter.
func WithPropertyFilter(filter func(*PropertyQuery) (*PropertyQuery, error)) PropertyPaginateOption {
	return func(pager *propertyPager) error {
		if filter == nil {
			return errors.New("PropertyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type propertyPager struct {
	order  *PropertyOrder
	filter func(*PropertyQuery) (*PropertyQuery, error)
}

func newPropertyPager(opts []PropertyPaginateOption) (*propertyPager, error) {
	pager := &propertyPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPropertyOrder
	}
	return pager, nil
}

func (p *propertyPager) applyFilter(query *PropertyQuery) (*PropertyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *propertyPager) toCursor(pr *Property) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *propertyPager) applyCursors(query *PropertyQuery, after, before *Cursor) *PropertyQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultPropertyOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *propertyPager) applyOrder(query *PropertyQuery, reverse bool) *PropertyQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultPropertyOrder.Field {
		query = query.Order(direction.orderFunc(DefaultPropertyOrder.Field.field))
	}
	return query
}

func (p *propertyPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPropertyOrder.Field {
			b.Comma().Ident(DefaultPropertyOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Property.
func (pr *PropertyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PropertyPaginateOption,
) (*PropertyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPropertyPager(opts)
	if err != nil {
		return nil, err
	}
	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}
	conn := &PropertyConnection{Edges: []*PropertyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pr.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	pr = pager.applyCursors(pr, after, before)
	pr = pager.applyOrder(pr, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		pr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := pr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PropertyOrderField defines the ordering field of Property.
type PropertyOrderField struct {
	field    string
	toCursor func(*Property) Cursor
}

// PropertyOrder defines the ordering of Property.
type PropertyOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *PropertyOrderField `json:"field"`
}

// DefaultPropertyOrder is the default ordering of Property.
var DefaultPropertyOrder = &PropertyOrder{
	Direction: OrderDirectionAsc,
	Field: &PropertyOrderField{
		field: property.FieldID,
		toCursor: func(pr *Property) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts Property into PropertyEdge.
func (pr *Property) ToEdge(order *PropertyOrder) *PropertyEdge {
	if order == nil {
		order = DefaultPropertyOrder
	}
	return &PropertyEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// PropertyTypeEdge is the edge representation of PropertyType.
type PropertyTypeEdge struct {
	Node   *PropertyType `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// PropertyTypeConnection is the connection containing edges to PropertyType.
type PropertyTypeConnection struct {
	Edges      []*PropertyTypeEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *PropertyTypeConnection) build(nodes []*PropertyType, pager *propertytypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PropertyType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PropertyType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PropertyType {
			return nodes[i]
		}
	}
	c.Edges = make([]*PropertyTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PropertyTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PropertyTypePaginateOption enables pagination customization.
type PropertyTypePaginateOption func(*propertytypePager) error

// WithPropertyTypeOrder configures pagination ordering.
func WithPropertyTypeOrder(order *PropertyTypeOrder) PropertyTypePaginateOption {
	if order == nil {
		order = DefaultPropertyTypeOrder
	}
	o := *order
	return func(pager *propertytypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPropertyTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPropertyTypeFilter configures pagination filter.
func WithPropertyTypeFilter(filter func(*PropertyTypeQuery) (*PropertyTypeQuery, error)) PropertyTypePaginateOption {
	return func(pager *propertytypePager) error {
		if filter == nil {
			return errors.New("PropertyTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type propertytypePager struct {
	order  *PropertyTypeOrder
	filter func(*PropertyTypeQuery) (*PropertyTypeQuery, error)
}

func newPropertyTypePager(opts []PropertyTypePaginateOption) (*propertytypePager, error) {
	pager := &propertytypePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPropertyTypeOrder
	}
	return pager, nil
}

func (p *propertytypePager) applyFilter(query *PropertyTypeQuery) (*PropertyTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *propertytypePager) toCursor(pt *PropertyType) Cursor {
	return p.order.Field.toCursor(pt)
}

func (p *propertytypePager) applyCursors(query *PropertyTypeQuery, after, before *Cursor) *PropertyTypeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultPropertyTypeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *propertytypePager) applyOrder(query *PropertyTypeQuery, reverse bool) *PropertyTypeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultPropertyTypeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultPropertyTypeOrder.Field.field))
	}
	return query
}

func (p *propertytypePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPropertyTypeOrder.Field {
			b.Comma().Ident(DefaultPropertyTypeOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PropertyType.
func (pt *PropertyTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PropertyTypePaginateOption,
) (*PropertyTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPropertyTypePager(opts)
	if err != nil {
		return nil, err
	}
	if pt, err = pager.applyFilter(pt); err != nil {
		return nil, err
	}
	conn := &PropertyTypeConnection{Edges: []*PropertyTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pt.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	pt = pager.applyCursors(pt, after, before)
	pt = pager.applyOrder(pt, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		pt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pt.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := pt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PropertyTypeOrderField defines the ordering field of PropertyType.
type PropertyTypeOrderField struct {
	field    string
	toCursor func(*PropertyType) Cursor
}

// PropertyTypeOrder defines the ordering of PropertyType.
type PropertyTypeOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *PropertyTypeOrderField `json:"field"`
}

// DefaultPropertyTypeOrder is the default ordering of PropertyType.
var DefaultPropertyTypeOrder = &PropertyTypeOrder{
	Direction: OrderDirectionAsc,
	Field: &PropertyTypeOrderField{
		field: propertytype.FieldID,
		toCursor: func(pt *PropertyType) Cursor {
			return Cursor{ID: pt.ID}
		},
	},
}

// ToEdge converts PropertyType into PropertyTypeEdge.
func (pt *PropertyType) ToEdge(order *PropertyTypeOrder) *PropertyTypeEdge {
	if order == nil {
		order = DefaultPropertyTypeOrder
	}
	return &PropertyTypeEdge{
		Node:   pt,
		Cursor: order.Field.toCursor(pt),
	}
}

// ResourceEdge is the edge representation of Resource.
type ResourceEdge struct {
	Node   *Resource `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ResourceConnection is the connection containing edges to Resource.
type ResourceConnection struct {
	Edges      []*ResourceEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *ResourceConnection) build(nodes []*Resource, pager *resourcePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Resource
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Resource {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Resource {
			return nodes[i]
		}
	}
	c.Edges = make([]*ResourceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ResourceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ResourcePaginateOption enables pagination customization.
type ResourcePaginateOption func(*resourcePager) error

// WithResourceOrder configures pagination ordering.
func WithResourceOrder(order *ResourceOrder) ResourcePaginateOption {
	if order == nil {
		order = DefaultResourceOrder
	}
	o := *order
	return func(pager *resourcePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultResourceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithResourceFilter configures pagination filter.
func WithResourceFilter(filter func(*ResourceQuery) (*ResourceQuery, error)) ResourcePaginateOption {
	return func(pager *resourcePager) error {
		if filter == nil {
			return errors.New("ResourceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type resourcePager struct {
	order  *ResourceOrder
	filter func(*ResourceQuery) (*ResourceQuery, error)
}

func newResourcePager(opts []ResourcePaginateOption) (*resourcePager, error) {
	pager := &resourcePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultResourceOrder
	}
	return pager, nil
}

func (p *resourcePager) applyFilter(query *ResourceQuery) (*ResourceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *resourcePager) toCursor(r *Resource) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *resourcePager) applyCursors(query *ResourceQuery, after, before *Cursor) *ResourceQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultResourceOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *resourcePager) applyOrder(query *ResourceQuery, reverse bool) *ResourceQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultResourceOrder.Field {
		query = query.Order(direction.orderFunc(DefaultResourceOrder.Field.field))
	}
	return query
}

func (p *resourcePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultResourceOrder.Field {
			b.Comma().Ident(DefaultResourceOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Resource.
func (r *ResourceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ResourcePaginateOption,
) (*ResourceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newResourcePager(opts)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &ResourceConnection{Edges: []*ResourceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = r.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	r = pager.applyCursors(r, after, before)
	r = pager.applyOrder(r, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ResourceOrderField defines the ordering field of Resource.
type ResourceOrderField struct {
	field    string
	toCursor func(*Resource) Cursor
}

// ResourceOrder defines the ordering of Resource.
type ResourceOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ResourceOrderField `json:"field"`
}

// DefaultResourceOrder is the default ordering of Resource.
var DefaultResourceOrder = &ResourceOrder{
	Direction: OrderDirectionAsc,
	Field: &ResourceOrderField{
		field: resource.FieldID,
		toCursor: func(r *Resource) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Resource into ResourceEdge.
func (r *Resource) ToEdge(order *ResourceOrder) *ResourceEdge {
	if order == nil {
		order = DefaultResourceOrder
	}
	return &ResourceEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// ResourcePoolEdge is the edge representation of ResourcePool.
type ResourcePoolEdge struct {
	Node   *ResourcePool `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// ResourcePoolConnection is the connection containing edges to ResourcePool.
type ResourcePoolConnection struct {
	Edges      []*ResourcePoolEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *ResourcePoolConnection) build(nodes []*ResourcePool, pager *resourcepoolPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ResourcePool
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ResourcePool {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ResourcePool {
			return nodes[i]
		}
	}
	c.Edges = make([]*ResourcePoolEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ResourcePoolEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ResourcePoolPaginateOption enables pagination customization.
type ResourcePoolPaginateOption func(*resourcepoolPager) error

// WithResourcePoolOrder configures pagination ordering.
func WithResourcePoolOrder(order *ResourcePoolOrder) ResourcePoolPaginateOption {
	if order == nil {
		order = DefaultResourcePoolOrder
	}
	o := *order
	return func(pager *resourcepoolPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultResourcePoolOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithResourcePoolFilter configures pagination filter.
func WithResourcePoolFilter(filter func(*ResourcePoolQuery) (*ResourcePoolQuery, error)) ResourcePoolPaginateOption {
	return func(pager *resourcepoolPager) error {
		if filter == nil {
			return errors.New("ResourcePoolQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type resourcepoolPager struct {
	order  *ResourcePoolOrder
	filter func(*ResourcePoolQuery) (*ResourcePoolQuery, error)
}

func newResourcePoolPager(opts []ResourcePoolPaginateOption) (*resourcepoolPager, error) {
	pager := &resourcepoolPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultResourcePoolOrder
	}
	return pager, nil
}

func (p *resourcepoolPager) applyFilter(query *ResourcePoolQuery) (*ResourcePoolQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *resourcepoolPager) toCursor(rp *ResourcePool) Cursor {
	return p.order.Field.toCursor(rp)
}

func (p *resourcepoolPager) applyCursors(query *ResourcePoolQuery, after, before *Cursor) *ResourcePoolQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultResourcePoolOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *resourcepoolPager) applyOrder(query *ResourcePoolQuery, reverse bool) *ResourcePoolQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultResourcePoolOrder.Field {
		query = query.Order(direction.orderFunc(DefaultResourcePoolOrder.Field.field))
	}
	return query
}

func (p *resourcepoolPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultResourcePoolOrder.Field {
			b.Comma().Ident(DefaultResourcePoolOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ResourcePool.
func (rp *ResourcePoolQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ResourcePoolPaginateOption,
) (*ResourcePoolConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newResourcePoolPager(opts)
	if err != nil {
		return nil, err
	}
	if rp, err = pager.applyFilter(rp); err != nil {
		return nil, err
	}
	conn := &ResourcePoolConnection{Edges: []*ResourcePoolEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = rp.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	rp = pager.applyCursors(rp, after, before)
	rp = pager.applyOrder(rp, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		rp.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := rp.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := rp.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ResourcePoolOrderFieldName orders ResourcePool by name.
	ResourcePoolOrderFieldName = &ResourcePoolOrderField{
		field: resourcepool.FieldName,
		toCursor: func(rp *ResourcePool) Cursor {
			return Cursor{
				ID:    rp.ID,
				Value: rp.Name,
			}
		},
	}
	// ResourcePoolOrderFieldDealocationSafetyPeriod orders ResourcePool by dealocation_safety_period.
	ResourcePoolOrderFieldDealocationSafetyPeriod = &ResourcePoolOrderField{
		field: resourcepool.FieldDealocationSafetyPeriod,
		toCursor: func(rp *ResourcePool) Cursor {
			return Cursor{
				ID:    rp.ID,
				Value: rp.DealocationSafetyPeriod,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ResourcePoolOrderField) String() string {
	var str string
	switch f.field {
	case resourcepool.FieldName:
		str = "name"
	case resourcepool.FieldDealocationSafetyPeriod:
		str = "dealocationSafetyPeriod"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ResourcePoolOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ResourcePoolOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ResourcePoolOrderField %T must be a string", v)
	}
	switch str {
	case "name":
		*f = *ResourcePoolOrderFieldName
	case "dealocationSafetyPeriod":
		*f = *ResourcePoolOrderFieldDealocationSafetyPeriod
	default:
		return fmt.Errorf("%s is not a valid ResourcePoolOrderField", str)
	}
	return nil
}

// ResourcePoolOrderField defines the ordering field of ResourcePool.
type ResourcePoolOrderField struct {
	field    string
	toCursor func(*ResourcePool) Cursor
}

// ResourcePoolOrder defines the ordering of ResourcePool.
type ResourcePoolOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *ResourcePoolOrderField `json:"field"`
}

// DefaultResourcePoolOrder is the default ordering of ResourcePool.
var DefaultResourcePoolOrder = &ResourcePoolOrder{
	Direction: OrderDirectionAsc,
	Field: &ResourcePoolOrderField{
		field: resourcepool.FieldID,
		toCursor: func(rp *ResourcePool) Cursor {
			return Cursor{ID: rp.ID}
		},
	},
}

// ToEdge converts ResourcePool into ResourcePoolEdge.
func (rp *ResourcePool) ToEdge(order *ResourcePoolOrder) *ResourcePoolEdge {
	if order == nil {
		order = DefaultResourcePoolOrder
	}
	return &ResourcePoolEdge{
		Node:   rp,
		Cursor: order.Field.toCursor(rp),
	}
}

// ResourceTypeEdge is the edge representation of ResourceType.
type ResourceTypeEdge struct {
	Node   *ResourceType `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// ResourceTypeConnection is the connection containing edges to ResourceType.
type ResourceTypeConnection struct {
	Edges      []*ResourceTypeEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *ResourceTypeConnection) build(nodes []*ResourceType, pager *resourcetypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ResourceType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ResourceType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ResourceType {
			return nodes[i]
		}
	}
	c.Edges = make([]*ResourceTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ResourceTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ResourceTypePaginateOption enables pagination customization.
type ResourceTypePaginateOption func(*resourcetypePager) error

// WithResourceTypeOrder configures pagination ordering.
func WithResourceTypeOrder(order *ResourceTypeOrder) ResourceTypePaginateOption {
	if order == nil {
		order = DefaultResourceTypeOrder
	}
	o := *order
	return func(pager *resourcetypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultResourceTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithResourceTypeFilter configures pagination filter.
func WithResourceTypeFilter(filter func(*ResourceTypeQuery) (*ResourceTypeQuery, error)) ResourceTypePaginateOption {
	return func(pager *resourcetypePager) error {
		if filter == nil {
			return errors.New("ResourceTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type resourcetypePager struct {
	order  *ResourceTypeOrder
	filter func(*ResourceTypeQuery) (*ResourceTypeQuery, error)
}

func newResourceTypePager(opts []ResourceTypePaginateOption) (*resourcetypePager, error) {
	pager := &resourcetypePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultResourceTypeOrder
	}
	return pager, nil
}

func (p *resourcetypePager) applyFilter(query *ResourceTypeQuery) (*ResourceTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *resourcetypePager) toCursor(rt *ResourceType) Cursor {
	return p.order.Field.toCursor(rt)
}

func (p *resourcetypePager) applyCursors(query *ResourceTypeQuery, after, before *Cursor) *ResourceTypeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultResourceTypeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *resourcetypePager) applyOrder(query *ResourceTypeQuery, reverse bool) *ResourceTypeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultResourceTypeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultResourceTypeOrder.Field.field))
	}
	return query
}

func (p *resourcetypePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultResourceTypeOrder.Field {
			b.Comma().Ident(DefaultResourceTypeOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ResourceType.
func (rt *ResourceTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ResourceTypePaginateOption,
) (*ResourceTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newResourceTypePager(opts)
	if err != nil {
		return nil, err
	}
	if rt, err = pager.applyFilter(rt); err != nil {
		return nil, err
	}
	conn := &ResourceTypeConnection{Edges: []*ResourceTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = rt.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	rt = pager.applyCursors(rt, after, before)
	rt = pager.applyOrder(rt, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		rt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := rt.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := rt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ResourceTypeOrderField defines the ordering field of ResourceType.
type ResourceTypeOrderField struct {
	field    string
	toCursor func(*ResourceType) Cursor
}

// ResourceTypeOrder defines the ordering of ResourceType.
type ResourceTypeOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *ResourceTypeOrderField `json:"field"`
}

// DefaultResourceTypeOrder is the default ordering of ResourceType.
var DefaultResourceTypeOrder = &ResourceTypeOrder{
	Direction: OrderDirectionAsc,
	Field: &ResourceTypeOrderField{
		field: resourcetype.FieldID,
		toCursor: func(rt *ResourceType) Cursor {
			return Cursor{ID: rt.ID}
		},
	},
}

// ToEdge converts ResourceType into ResourceTypeEdge.
func (rt *ResourceType) ToEdge(order *ResourceTypeOrder) *ResourceTypeEdge {
	if order == nil {
		order = DefaultResourceTypeOrder
	}
	return &ResourceTypeEdge{
		Node:   rt,
		Cursor: order.Field.toCursor(rt),
	}
}

// TagEdge is the edge representation of Tag.
type TagEdge struct {
	Node   *Tag   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TagConnection is the connection containing edges to Tag.
type TagConnection struct {
	Edges      []*TagEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

func (c *TagConnection) build(nodes []*Tag, pager *tagPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Tag
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Tag {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Tag {
			return nodes[i]
		}
	}
	c.Edges = make([]*TagEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TagEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TagPaginateOption enables pagination customization.
type TagPaginateOption func(*tagPager) error

// WithTagOrder configures pagination ordering.
func WithTagOrder(order *TagOrder) TagPaginateOption {
	if order == nil {
		order = DefaultTagOrder
	}
	o := *order
	return func(pager *tagPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTagOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTagFilter configures pagination filter.
func WithTagFilter(filter func(*TagQuery) (*TagQuery, error)) TagPaginateOption {
	return func(pager *tagPager) error {
		if filter == nil {
			return errors.New("TagQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tagPager struct {
	order  *TagOrder
	filter func(*TagQuery) (*TagQuery, error)
}

func newTagPager(opts []TagPaginateOption) (*tagPager, error) {
	pager := &tagPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTagOrder
	}
	return pager, nil
}

func (p *tagPager) applyFilter(query *TagQuery) (*TagQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tagPager) toCursor(t *Tag) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *tagPager) applyCursors(query *TagQuery, after, before *Cursor) *TagQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTagOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *tagPager) applyOrder(query *TagQuery, reverse bool) *TagQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTagOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTagOrder.Field.field))
	}
	return query
}

func (p *tagPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTagOrder.Field {
			b.Comma().Ident(DefaultTagOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Tag.
func (t *TagQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TagPaginateOption,
) (*TagConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTagPager(opts)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TagConnection{Edges: []*TagEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = t.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// TagOrderField defines the ordering field of Tag.
type TagOrderField struct {
	field    string
	toCursor func(*Tag) Cursor
}

// TagOrder defines the ordering of Tag.
type TagOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *TagOrderField `json:"field"`
}

// DefaultTagOrder is the default ordering of Tag.
var DefaultTagOrder = &TagOrder{
	Direction: OrderDirectionAsc,
	Field: &TagOrderField{
		field: tag.FieldID,
		toCursor: func(t *Tag) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Tag into TagEdge.
func (t *Tag) ToEdge(order *TagOrder) *TagEdge {
	if order == nil {
		order = DefaultTagOrder
	}
	return &TagEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}
