// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/net-auto/resourceManager/ent/property"
	"github.com/net-auto/resourceManager/ent/propertytype"
	"github.com/net-auto/resourceManager/ent/resource"
)

// Property is the model entity for the Property schema.
type Property struct {
	config `gqlgen:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IntVal holds the value of the "int_val" field.
	IntVal *int `json:"intValue" gqlgen:"intValue"`
	// BoolVal holds the value of the "bool_val" field.
	BoolVal *bool `json:"booleanValue" gqlgen:"booleanValue"`
	// FloatVal holds the value of the "float_val" field.
	FloatVal *float64 `json:"floatValue" gqlgen:"floatValue"`
	// LatitudeVal holds the value of the "latitude_val" field.
	LatitudeVal *float64 `json:"latitudeValue" gqlgen:"latitudeValue"`
	// LongitudeVal holds the value of the "longitude_val" field.
	LongitudeVal *float64 `json:"longitudeValue" gqlgen:"longitudeValue"`
	// RangeFromVal holds the value of the "range_from_val" field.
	RangeFromVal *float64 `json:"rangeFromValue" gqlgen:"rangeFromValue"`
	// RangeToVal holds the value of the "range_to_val" field.
	RangeToVal *float64 `json:"rangeToValue" gqlgen:"rangeToValue"`
	// StringVal holds the value of the "string_val" field.
	StringVal *string `json:"stringValue" gqlgen:"stringValue"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PropertyQuery when eager-loading is set.
	Edges                      PropertyEdges `json:"edges"`
	pool_properties_properties *int
	property_type              *int
	resource_properties        *int
}

// PropertyEdges holds the relations/edges for other nodes in the graph.
type PropertyEdges struct {
	// Type holds the value of the type edge.
	Type *PropertyType `json:"type,omitempty" gqlgen:"propertyType"`
	// Resources holds the value of the resources edge.
	Resources *Resource `json:"resources,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TypeOrErr returns the Type value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PropertyEdges) TypeOrErr() (*PropertyType, error) {
	if e.loadedTypes[0] {
		if e.Type == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: propertytype.Label}
		}
		return e.Type, nil
	}
	return nil, &NotLoadedError{edge: "type"}
}

// ResourcesOrErr returns the Resources value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PropertyEdges) ResourcesOrErr() (*Resource, error) {
	if e.loadedTypes[1] {
		if e.Resources == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: resource.Label}
		}
		return e.Resources, nil
	}
	return nil, &NotLoadedError{edge: "resources"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Property) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case property.FieldBoolVal:
			values[i] = new(sql.NullBool)
		case property.FieldFloatVal, property.FieldLatitudeVal, property.FieldLongitudeVal, property.FieldRangeFromVal, property.FieldRangeToVal:
			values[i] = new(sql.NullFloat64)
		case property.FieldID, property.FieldIntVal:
			values[i] = new(sql.NullInt64)
		case property.FieldStringVal:
			values[i] = new(sql.NullString)
		case property.ForeignKeys[0]: // pool_properties_properties
			values[i] = new(sql.NullInt64)
		case property.ForeignKeys[1]: // property_type
			values[i] = new(sql.NullInt64)
		case property.ForeignKeys[2]: // resource_properties
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Property", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Property fields.
func (pr *Property) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case property.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case property.FieldIntVal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int_val", values[i])
			} else if value.Valid {
				pr.IntVal = new(int)
				*pr.IntVal = int(value.Int64)
			}
		case property.FieldBoolVal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field bool_val", values[i])
			} else if value.Valid {
				pr.BoolVal = new(bool)
				*pr.BoolVal = value.Bool
			}
		case property.FieldFloatVal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field float_val", values[i])
			} else if value.Valid {
				pr.FloatVal = new(float64)
				*pr.FloatVal = value.Float64
			}
		case property.FieldLatitudeVal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude_val", values[i])
			} else if value.Valid {
				pr.LatitudeVal = new(float64)
				*pr.LatitudeVal = value.Float64
			}
		case property.FieldLongitudeVal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude_val", values[i])
			} else if value.Valid {
				pr.LongitudeVal = new(float64)
				*pr.LongitudeVal = value.Float64
			}
		case property.FieldRangeFromVal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field range_from_val", values[i])
			} else if value.Valid {
				pr.RangeFromVal = new(float64)
				*pr.RangeFromVal = value.Float64
			}
		case property.FieldRangeToVal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field range_to_val", values[i])
			} else if value.Valid {
				pr.RangeToVal = new(float64)
				*pr.RangeToVal = value.Float64
			}
		case property.FieldStringVal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_val", values[i])
			} else if value.Valid {
				pr.StringVal = new(string)
				*pr.StringVal = value.String
			}
		case property.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field pool_properties_properties", value)
			} else if value.Valid {
				pr.pool_properties_properties = new(int)
				*pr.pool_properties_properties = int(value.Int64)
			}
		case property.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field property_type", value)
			} else if value.Valid {
				pr.property_type = new(int)
				*pr.property_type = int(value.Int64)
			}
		case property.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field resource_properties", value)
			} else if value.Valid {
				pr.resource_properties = new(int)
				*pr.resource_properties = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryType queries the "type" edge of the Property entity.
func (pr *Property) QueryType() *PropertyTypeQuery {
	return (&PropertyClient{config: pr.config}).QueryType(pr)
}

// QueryResources queries the "resources" edge of the Property entity.
func (pr *Property) QueryResources() *ResourceQuery {
	return (&PropertyClient{config: pr.config}).QueryResources(pr)
}

// Update returns a builder for updating this Property.
// Note that you need to call Property.Unwrap() before calling this method if this Property
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Property) Update() *PropertyUpdateOne {
	return (&PropertyClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Property entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Property) Unwrap() *Property {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Property is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Property) String() string {
	var builder strings.Builder
	builder.WriteString("Property(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	if v := pr.IntVal; v != nil {
		builder.WriteString("int_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.BoolVal; v != nil {
		builder.WriteString("bool_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.FloatVal; v != nil {
		builder.WriteString("float_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.LatitudeVal; v != nil {
		builder.WriteString("latitude_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.LongitudeVal; v != nil {
		builder.WriteString("longitude_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.RangeFromVal; v != nil {
		builder.WriteString("range_from_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.RangeToVal; v != nil {
		builder.WriteString("range_to_val=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.StringVal; v != nil {
		builder.WriteString("string_val=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Properties is a parsable slice of Property.
type Properties []*Property

func (pr Properties) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
