// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/net-auto/resourceManager/ent/allocationstrategy"
	"github.com/net-auto/resourceManager/ent/predicate"
	"github.com/net-auto/resourceManager/ent/resource"
	"github.com/net-auto/resourceManager/ent/resourcepool"
	"github.com/net-auto/resourceManager/ent/resourcetype"
	"github.com/net-auto/resourceManager/ent/tag"
)

// ResourcePoolQuery is the builder for querying ResourcePool entities.
type ResourcePoolQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ResourcePool
	// eager-loading edges.
	withResourceType       *ResourceTypeQuery
	withTags               *TagQuery
	withClaims             *ResourceQuery
	withAllocationStrategy *AllocationStrategyQuery
	withFKs                bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (rpq *ResourcePoolQuery) Where(ps ...predicate.ResourcePool) *ResourcePoolQuery {
	rpq.predicates = append(rpq.predicates, ps...)
	return rpq
}

// Limit adds a limit step to the query.
func (rpq *ResourcePoolQuery) Limit(limit int) *ResourcePoolQuery {
	rpq.limit = &limit
	return rpq
}

// Offset adds an offset step to the query.
func (rpq *ResourcePoolQuery) Offset(offset int) *ResourcePoolQuery {
	rpq.offset = &offset
	return rpq
}

// Order adds an order step to the query.
func (rpq *ResourcePoolQuery) Order(o ...OrderFunc) *ResourcePoolQuery {
	rpq.order = append(rpq.order, o...)
	return rpq
}

// QueryResourceType chains the current query on the resource_type edge.
func (rpq *ResourcePoolQuery) QueryResourceType() *ResourceTypeQuery {
	query := &ResourceTypeQuery{config: rpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcepool.Table, resourcepool.FieldID, rpq.sqlQuery()),
			sqlgraph.To(resourcetype.Table, resourcetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcepool.ResourceTypeTable, resourcepool.ResourceTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTags chains the current query on the tags edge.
func (rpq *ResourcePoolQuery) QueryTags() *TagQuery {
	query := &TagQuery{config: rpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcepool.Table, resourcepool.FieldID, rpq.sqlQuery()),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, resourcepool.TagsTable, resourcepool.TagsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClaims chains the current query on the claims edge.
func (rpq *ResourcePoolQuery) QueryClaims() *ResourceQuery {
	query := &ResourceQuery{config: rpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcepool.Table, resourcepool.FieldID, rpq.sqlQuery()),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resourcepool.ClaimsTable, resourcepool.ClaimsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAllocationStrategy chains the current query on the allocation_strategy edge.
func (rpq *ResourcePoolQuery) QueryAllocationStrategy() *AllocationStrategyQuery {
	query := &AllocationStrategyQuery{config: rpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcepool.Table, resourcepool.FieldID, rpq.sqlQuery()),
			sqlgraph.To(allocationstrategy.Table, allocationstrategy.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, resourcepool.AllocationStrategyTable, resourcepool.AllocationStrategyColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ResourcePool entity in the query. Returns *NotFoundError when no resourcepool was found.
func (rpq *ResourcePoolQuery) First(ctx context.Context) (*ResourcePool, error) {
	rps, err := rpq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(rps) == 0 {
		return nil, &NotFoundError{resourcepool.Label}
	}
	return rps[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rpq *ResourcePoolQuery) FirstX(ctx context.Context) *ResourcePool {
	rp, err := rpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return rp
}

// FirstID returns the first ResourcePool id in the query. Returns *NotFoundError when no id was found.
func (rpq *ResourcePoolQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rpq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{resourcepool.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (rpq *ResourcePoolQuery) FirstXID(ctx context.Context) int {
	id, err := rpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ResourcePool entity in the query, returns an error if not exactly one entity was returned.
func (rpq *ResourcePoolQuery) Only(ctx context.Context) (*ResourcePool, error) {
	rps, err := rpq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(rps) {
	case 1:
		return rps[0], nil
	case 0:
		return nil, &NotFoundError{resourcepool.Label}
	default:
		return nil, &NotSingularError{resourcepool.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rpq *ResourcePoolQuery) OnlyX(ctx context.Context) *ResourcePool {
	rp, err := rpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return rp
}

// OnlyID returns the only ResourcePool id in the query, returns an error if not exactly one id was returned.
func (rpq *ResourcePoolQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rpq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{resourcepool.Label}
	default:
		err = &NotSingularError{resourcepool.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rpq *ResourcePoolQuery) OnlyIDX(ctx context.Context) int {
	id, err := rpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ResourcePools.
func (rpq *ResourcePoolQuery) All(ctx context.Context) ([]*ResourcePool, error) {
	if err := rpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rpq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rpq *ResourcePoolQuery) AllX(ctx context.Context) []*ResourcePool {
	rps, err := rpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return rps
}

// IDs executes the query and returns a list of ResourcePool ids.
func (rpq *ResourcePoolQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rpq.Select(resourcepool.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rpq *ResourcePoolQuery) IDsX(ctx context.Context) []int {
	ids, err := rpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rpq *ResourcePoolQuery) Count(ctx context.Context) (int, error) {
	if err := rpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rpq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rpq *ResourcePoolQuery) CountX(ctx context.Context) int {
	count, err := rpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rpq *ResourcePoolQuery) Exist(ctx context.Context) (bool, error) {
	if err := rpq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rpq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rpq *ResourcePoolQuery) ExistX(ctx context.Context) bool {
	exist, err := rpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rpq *ResourcePoolQuery) Clone() *ResourcePoolQuery {
	return &ResourcePoolQuery{
		config:     rpq.config,
		limit:      rpq.limit,
		offset:     rpq.offset,
		order:      append([]OrderFunc{}, rpq.order...),
		unique:     append([]string{}, rpq.unique...),
		predicates: append([]predicate.ResourcePool{}, rpq.predicates...),
		// clone intermediate query.
		sql:  rpq.sql.Clone(),
		path: rpq.path,
	}
}

//  WithResourceType tells the query-builder to eager-loads the nodes that are connected to
// the "resource_type" edge. The optional arguments used to configure the query builder of the edge.
func (rpq *ResourcePoolQuery) WithResourceType(opts ...func(*ResourceTypeQuery)) *ResourcePoolQuery {
	query := &ResourceTypeQuery{config: rpq.config}
	for _, opt := range opts {
		opt(query)
	}
	rpq.withResourceType = query
	return rpq
}

//  WithTags tells the query-builder to eager-loads the nodes that are connected to
// the "tags" edge. The optional arguments used to configure the query builder of the edge.
func (rpq *ResourcePoolQuery) WithTags(opts ...func(*TagQuery)) *ResourcePoolQuery {
	query := &TagQuery{config: rpq.config}
	for _, opt := range opts {
		opt(query)
	}
	rpq.withTags = query
	return rpq
}

//  WithClaims tells the query-builder to eager-loads the nodes that are connected to
// the "claims" edge. The optional arguments used to configure the query builder of the edge.
func (rpq *ResourcePoolQuery) WithClaims(opts ...func(*ResourceQuery)) *ResourcePoolQuery {
	query := &ResourceQuery{config: rpq.config}
	for _, opt := range opts {
		opt(query)
	}
	rpq.withClaims = query
	return rpq
}

//  WithAllocationStrategy tells the query-builder to eager-loads the nodes that are connected to
// the "allocation_strategy" edge. The optional arguments used to configure the query builder of the edge.
func (rpq *ResourcePoolQuery) WithAllocationStrategy(opts ...func(*AllocationStrategyQuery)) *ResourcePoolQuery {
	query := &AllocationStrategyQuery{config: rpq.config}
	for _, opt := range opts {
		opt(query)
	}
	rpq.withAllocationStrategy = query
	return rpq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ResourcePool.Query().
//		GroupBy(resourcepool.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rpq *ResourcePoolQuery) GroupBy(field string, fields ...string) *ResourcePoolGroupBy {
	group := &ResourcePoolGroupBy{config: rpq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rpq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.ResourcePool.Query().
//		Select(resourcepool.FieldName).
//		Scan(ctx, &v)
//
func (rpq *ResourcePoolQuery) Select(field string, fields ...string) *ResourcePoolSelect {
	selector := &ResourcePoolSelect{config: rpq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rpq.sqlQuery(), nil
	}
	return selector
}

func (rpq *ResourcePoolQuery) prepareQuery(ctx context.Context) error {
	if rpq.path != nil {
		prev, err := rpq.path(ctx)
		if err != nil {
			return err
		}
		rpq.sql = prev
	}
	return nil
}

func (rpq *ResourcePoolQuery) sqlAll(ctx context.Context) ([]*ResourcePool, error) {
	var (
		nodes       = []*ResourcePool{}
		withFKs     = rpq.withFKs
		_spec       = rpq.querySpec()
		loadedTypes = [4]bool{
			rpq.withResourceType != nil,
			rpq.withTags != nil,
			rpq.withClaims != nil,
			rpq.withAllocationStrategy != nil,
		}
	)
	if rpq.withResourceType != nil || rpq.withAllocationStrategy != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, resourcepool.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &ResourcePool{config: rpq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, rpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rpq.withResourceType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourcePool)
		for i := range nodes {
			if fk := nodes[i].resource_type_pools; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(resourcetype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_type_pools" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ResourceType = n
			}
		}
	}

	if query := rpq.withTags; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*ResourcePool, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
		}
		var (
			edgeids []int
			edges   = make(map[int][]*ResourcePool)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   resourcepool.TagsTable,
				Columns: resourcepool.TagsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(resourcepool.TagsPrimaryKey[1], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, rpq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "tags": %v`, err)
		}
		query.Where(tag.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "tags" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Tags = append(nodes[i].Edges.Tags, n)
			}
		}
	}

	if query := rpq.withClaims; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ResourcePool)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Resource(func(s *sql.Selector) {
			s.Where(sql.InValues(resourcepool.ClaimsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.resource_pool_claims
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "resource_pool_claims" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_pool_claims" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Claims = append(node.Edges.Claims, n)
		}
	}

	if query := rpq.withAllocationStrategy; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ResourcePool)
		for i := range nodes {
			if fk := nodes[i].resource_pool_allocation_strategy; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(allocationstrategy.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_pool_allocation_strategy" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.AllocationStrategy = n
			}
		}
	}

	return nodes, nil
}

func (rpq *ResourcePoolQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rpq.querySpec()
	return sqlgraph.CountNodes(ctx, rpq.driver, _spec)
}

func (rpq *ResourcePoolQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rpq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (rpq *ResourcePoolQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcepool.Table,
			Columns: resourcepool.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcepool.FieldID,
			},
		},
		From:   rpq.sql,
		Unique: true,
	}
	if ps := rpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rpq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rpq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rpq *ResourcePoolQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(rpq.driver.Dialect())
	t1 := builder.Table(resourcepool.Table)
	selector := builder.Select(t1.Columns(resourcepool.Columns...)...).From(t1)
	if rpq.sql != nil {
		selector = rpq.sql
		selector.Select(selector.Columns(resourcepool.Columns...)...)
	}
	for _, p := range rpq.predicates {
		p(selector)
	}
	for _, p := range rpq.order {
		p(selector)
	}
	if offset := rpq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rpq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ResourcePoolGroupBy is the builder for group-by ResourcePool entities.
type ResourcePoolGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rpgb *ResourcePoolGroupBy) Aggregate(fns ...AggregateFunc) *ResourcePoolGroupBy {
	rpgb.fns = append(rpgb.fns, fns...)
	return rpgb
}

// Scan applies the group-by query and scan the result into the given value.
func (rpgb *ResourcePoolGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rpgb.path(ctx)
	if err != nil {
		return err
	}
	rpgb.sql = query
	return rpgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rpgb *ResourcePoolGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rpgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (rpgb *ResourcePoolGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rpgb.fields) > 1 {
		return nil, errors.New("ent: ResourcePoolGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rpgb *ResourcePoolGroupBy) StringsX(ctx context.Context) []string {
	v, err := rpgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (rpgb *ResourcePoolGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rpgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepool.Label}
	default:
		err = fmt.Errorf("ent: ResourcePoolGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rpgb *ResourcePoolGroupBy) StringX(ctx context.Context) string {
	v, err := rpgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (rpgb *ResourcePoolGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rpgb.fields) > 1 {
		return nil, errors.New("ent: ResourcePoolGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rpgb *ResourcePoolGroupBy) IntsX(ctx context.Context) []int {
	v, err := rpgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (rpgb *ResourcePoolGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rpgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepool.Label}
	default:
		err = fmt.Errorf("ent: ResourcePoolGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rpgb *ResourcePoolGroupBy) IntX(ctx context.Context) int {
	v, err := rpgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (rpgb *ResourcePoolGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rpgb.fields) > 1 {
		return nil, errors.New("ent: ResourcePoolGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rpgb *ResourcePoolGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rpgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (rpgb *ResourcePoolGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rpgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepool.Label}
	default:
		err = fmt.Errorf("ent: ResourcePoolGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rpgb *ResourcePoolGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rpgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (rpgb *ResourcePoolGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rpgb.fields) > 1 {
		return nil, errors.New("ent: ResourcePoolGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rpgb *ResourcePoolGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rpgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (rpgb *ResourcePoolGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rpgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepool.Label}
	default:
		err = fmt.Errorf("ent: ResourcePoolGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rpgb *ResourcePoolGroupBy) BoolX(ctx context.Context) bool {
	v, err := rpgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rpgb *ResourcePoolGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rpgb.sqlQuery().Query()
	if err := rpgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rpgb *ResourcePoolGroupBy) sqlQuery() *sql.Selector {
	selector := rpgb.sql
	columns := make([]string, 0, len(rpgb.fields)+len(rpgb.fns))
	columns = append(columns, rpgb.fields...)
	for _, fn := range rpgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(rpgb.fields...)
}

// ResourcePoolSelect is the builder for select fields of ResourcePool entities.
type ResourcePoolSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (rps *ResourcePoolSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := rps.path(ctx)
	if err != nil {
		return err
	}
	rps.sql = query
	return rps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rps *ResourcePoolSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (rps *ResourcePoolSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rps.fields) > 1 {
		return nil, errors.New("ent: ResourcePoolSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rps *ResourcePoolSelect) StringsX(ctx context.Context) []string {
	v, err := rps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (rps *ResourcePoolSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepool.Label}
	default:
		err = fmt.Errorf("ent: ResourcePoolSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rps *ResourcePoolSelect) StringX(ctx context.Context) string {
	v, err := rps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (rps *ResourcePoolSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rps.fields) > 1 {
		return nil, errors.New("ent: ResourcePoolSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rps *ResourcePoolSelect) IntsX(ctx context.Context) []int {
	v, err := rps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (rps *ResourcePoolSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepool.Label}
	default:
		err = fmt.Errorf("ent: ResourcePoolSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rps *ResourcePoolSelect) IntX(ctx context.Context) int {
	v, err := rps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (rps *ResourcePoolSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rps.fields) > 1 {
		return nil, errors.New("ent: ResourcePoolSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rps *ResourcePoolSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (rps *ResourcePoolSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepool.Label}
	default:
		err = fmt.Errorf("ent: ResourcePoolSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rps *ResourcePoolSelect) Float64X(ctx context.Context) float64 {
	v, err := rps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (rps *ResourcePoolSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rps.fields) > 1 {
		return nil, errors.New("ent: ResourcePoolSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rps *ResourcePoolSelect) BoolsX(ctx context.Context) []bool {
	v, err := rps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (rps *ResourcePoolSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcepool.Label}
	default:
		err = fmt.Errorf("ent: ResourcePoolSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rps *ResourcePoolSelect) BoolX(ctx context.Context) bool {
	v, err := rps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rps *ResourcePoolSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rps.sqlQuery().Query()
	if err := rps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rps *ResourcePoolSelect) sqlQuery() sql.Querier {
	selector := rps.sql
	selector.Select(selector.Columns(rps.fields...)...)
	return selector
}
