// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/net-auto/resourceManager/ent/predicate"
	"github.com/net-auto/resourceManager/ent/propertytype"
	"github.com/net-auto/resourceManager/ent/resourcepool"
	"github.com/net-auto/resourceManager/ent/resourcetype"
)

// ResourceTypeQuery is the builder for querying ResourceType entities.
type ResourceTypeQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ResourceType
	// eager-loading edges.
	withPropertyTypes *PropertyTypeQuery
	withPools         *ResourcePoolQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (rtq *ResourceTypeQuery) Where(ps ...predicate.ResourceType) *ResourceTypeQuery {
	rtq.predicates = append(rtq.predicates, ps...)
	return rtq
}

// Limit adds a limit step to the query.
func (rtq *ResourceTypeQuery) Limit(limit int) *ResourceTypeQuery {
	rtq.limit = &limit
	return rtq
}

// Offset adds an offset step to the query.
func (rtq *ResourceTypeQuery) Offset(offset int) *ResourceTypeQuery {
	rtq.offset = &offset
	return rtq
}

// Order adds an order step to the query.
func (rtq *ResourceTypeQuery) Order(o ...OrderFunc) *ResourceTypeQuery {
	rtq.order = append(rtq.order, o...)
	return rtq
}

// QueryPropertyTypes chains the current query on the property_types edge.
func (rtq *ResourceTypeQuery) QueryPropertyTypes() *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: rtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcetype.Table, resourcetype.FieldID, selector),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resourcetype.PropertyTypesTable, resourcetype.PropertyTypesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPools chains the current query on the pools edge.
func (rtq *ResourceTypeQuery) QueryPools() *ResourcePoolQuery {
	query := &ResourcePoolQuery{config: rtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcetype.Table, resourcetype.FieldID, selector),
			sqlgraph.To(resourcepool.Table, resourcepool.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resourcetype.PoolsTable, resourcetype.PoolsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ResourceType entity in the query. Returns *NotFoundError when no resourcetype was found.
func (rtq *ResourceTypeQuery) First(ctx context.Context) (*ResourceType, error) {
	nodes, err := rtq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{resourcetype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rtq *ResourceTypeQuery) FirstX(ctx context.Context) *ResourceType {
	node, err := rtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ResourceType id in the query. Returns *NotFoundError when no id was found.
func (rtq *ResourceTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rtq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{resourcetype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rtq *ResourceTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := rtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ResourceType entity in the query, returns an error if not exactly one entity was returned.
func (rtq *ResourceTypeQuery) Only(ctx context.Context) (*ResourceType, error) {
	nodes, err := rtq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{resourcetype.Label}
	default:
		return nil, &NotSingularError{resourcetype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rtq *ResourceTypeQuery) OnlyX(ctx context.Context) *ResourceType {
	node, err := rtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only ResourceType id in the query, returns an error if not exactly one id was returned.
func (rtq *ResourceTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rtq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{resourcetype.Label}
	default:
		err = &NotSingularError{resourcetype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rtq *ResourceTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := rtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ResourceTypes.
func (rtq *ResourceTypeQuery) All(ctx context.Context) ([]*ResourceType, error) {
	if err := rtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rtq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rtq *ResourceTypeQuery) AllX(ctx context.Context) []*ResourceType {
	nodes, err := rtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ResourceType ids.
func (rtq *ResourceTypeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rtq.Select(resourcetype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rtq *ResourceTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := rtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rtq *ResourceTypeQuery) Count(ctx context.Context) (int, error) {
	if err := rtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rtq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rtq *ResourceTypeQuery) CountX(ctx context.Context) int {
	count, err := rtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rtq *ResourceTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := rtq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rtq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rtq *ResourceTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := rtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rtq *ResourceTypeQuery) Clone() *ResourceTypeQuery {
	return &ResourceTypeQuery{
		config:     rtq.config,
		limit:      rtq.limit,
		offset:     rtq.offset,
		order:      append([]OrderFunc{}, rtq.order...),
		unique:     append([]string{}, rtq.unique...),
		predicates: append([]predicate.ResourceType{}, rtq.predicates...),
		// clone intermediate query.
		sql:  rtq.sql.Clone(),
		path: rtq.path,
	}
}

//  WithPropertyTypes tells the query-builder to eager-loads the nodes that are connected to
// the "property_types" edge. The optional arguments used to configure the query builder of the edge.
func (rtq *ResourceTypeQuery) WithPropertyTypes(opts ...func(*PropertyTypeQuery)) *ResourceTypeQuery {
	query := &PropertyTypeQuery{config: rtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtq.withPropertyTypes = query
	return rtq
}

//  WithPools tells the query-builder to eager-loads the nodes that are connected to
// the "pools" edge. The optional arguments used to configure the query builder of the edge.
func (rtq *ResourceTypeQuery) WithPools(opts ...func(*ResourcePoolQuery)) *ResourceTypeQuery {
	query := &ResourcePoolQuery{config: rtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtq.withPools = query
	return rtq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ResourceType.Query().
//		GroupBy(resourcetype.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rtq *ResourceTypeQuery) GroupBy(field string, fields ...string) *ResourceTypeGroupBy {
	group := &ResourceTypeGroupBy{config: rtq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rtq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.ResourceType.Query().
//		Select(resourcetype.FieldName).
//		Scan(ctx, &v)
//
func (rtq *ResourceTypeQuery) Select(field string, fields ...string) *ResourceTypeSelect {
	selector := &ResourceTypeSelect{config: rtq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rtq.sqlQuery(), nil
	}
	return selector
}

func (rtq *ResourceTypeQuery) prepareQuery(ctx context.Context) error {
	if rtq.path != nil {
		prev, err := rtq.path(ctx)
		if err != nil {
			return err
		}
		rtq.sql = prev
	}
	if err := resourcetype.Policy.EvalQuery(ctx, rtq); err != nil {
		return err
	}
	return nil
}

func (rtq *ResourceTypeQuery) sqlAll(ctx context.Context) ([]*ResourceType, error) {
	var (
		nodes       = []*ResourceType{}
		withFKs     = rtq.withFKs
		_spec       = rtq.querySpec()
		loadedTypes = [2]bool{
			rtq.withPropertyTypes != nil,
			rtq.withPools != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, resourcetype.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &ResourceType{config: rtq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, rtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rtq.withPropertyTypes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ResourceType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.PropertyTypes = []*PropertyType{}
		}
		query.withFKs = true
		query.Where(predicate.PropertyType(func(s *sql.Selector) {
			s.Where(sql.InValues(resourcetype.PropertyTypesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.resource_type_property_types
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "resource_type_property_types" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_type_property_types" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.PropertyTypes = append(node.Edges.PropertyTypes, n)
		}
	}

	if query := rtq.withPools; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ResourceType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Pools = []*ResourcePool{}
		}
		query.withFKs = true
		query.Where(predicate.ResourcePool(func(s *sql.Selector) {
			s.Where(sql.InValues(resourcetype.PoolsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.resource_type_pools
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "resource_type_pools" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_type_pools" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Pools = append(node.Edges.Pools, n)
		}
	}

	return nodes, nil
}

func (rtq *ResourceTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rtq.querySpec()
	return sqlgraph.CountNodes(ctx, rtq.driver, _spec)
}

func (rtq *ResourceTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rtq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (rtq *ResourceTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcetype.Table,
			Columns: resourcetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcetype.FieldID,
			},
		},
		From:   rtq.sql,
		Unique: true,
	}
	if ps := rtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rtq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rtq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, resourcetype.ValidColumn)
			}
		}
	}
	return _spec
}

func (rtq *ResourceTypeQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(rtq.driver.Dialect())
	t1 := builder.Table(resourcetype.Table)
	selector := builder.Select(t1.Columns(resourcetype.Columns...)...).From(t1)
	if rtq.sql != nil {
		selector = rtq.sql
		selector.Select(selector.Columns(resourcetype.Columns...)...)
	}
	for _, p := range rtq.predicates {
		p(selector)
	}
	for _, p := range rtq.order {
		p(selector, resourcetype.ValidColumn)
	}
	if offset := rtq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rtq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ResourceTypeGroupBy is the builder for group-by ResourceType entities.
type ResourceTypeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rtgb *ResourceTypeGroupBy) Aggregate(fns ...AggregateFunc) *ResourceTypeGroupBy {
	rtgb.fns = append(rtgb.fns, fns...)
	return rtgb
}

// Scan applies the group-by query and scan the result into the given value.
func (rtgb *ResourceTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rtgb.path(ctx)
	if err != nil {
		return err
	}
	rtgb.sql = query
	return rtgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rtgb *ResourceTypeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rtgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (rtgb *ResourceTypeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rtgb.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rtgb *ResourceTypeGroupBy) StringsX(ctx context.Context) []string {
	v, err := rtgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (rtgb *ResourceTypeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rtgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rtgb *ResourceTypeGroupBy) StringX(ctx context.Context) string {
	v, err := rtgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (rtgb *ResourceTypeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rtgb.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rtgb *ResourceTypeGroupBy) IntsX(ctx context.Context) []int {
	v, err := rtgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (rtgb *ResourceTypeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rtgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rtgb *ResourceTypeGroupBy) IntX(ctx context.Context) int {
	v, err := rtgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (rtgb *ResourceTypeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rtgb.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rtgb *ResourceTypeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rtgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (rtgb *ResourceTypeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rtgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rtgb *ResourceTypeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rtgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (rtgb *ResourceTypeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rtgb.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rtgb *ResourceTypeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rtgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (rtgb *ResourceTypeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rtgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rtgb *ResourceTypeGroupBy) BoolX(ctx context.Context) bool {
	v, err := rtgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rtgb *ResourceTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rtgb.fields {
		if !resourcetype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rtgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rtgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rtgb *ResourceTypeGroupBy) sqlQuery() *sql.Selector {
	selector := rtgb.sql
	columns := make([]string, 0, len(rtgb.fields)+len(rtgb.fns))
	columns = append(columns, rtgb.fields...)
	for _, fn := range rtgb.fns {
		columns = append(columns, fn(selector, resourcetype.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(rtgb.fields...)
}

// ResourceTypeSelect is the builder for select fields of ResourceType entities.
type ResourceTypeSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (rts *ResourceTypeSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := rts.path(ctx)
	if err != nil {
		return err
	}
	rts.sql = query
	return rts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rts *ResourceTypeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (rts *ResourceTypeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rts.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rts *ResourceTypeSelect) StringsX(ctx context.Context) []string {
	v, err := rts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (rts *ResourceTypeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rts *ResourceTypeSelect) StringX(ctx context.Context) string {
	v, err := rts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (rts *ResourceTypeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rts.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rts *ResourceTypeSelect) IntsX(ctx context.Context) []int {
	v, err := rts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (rts *ResourceTypeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rts *ResourceTypeSelect) IntX(ctx context.Context) int {
	v, err := rts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (rts *ResourceTypeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rts.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rts *ResourceTypeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (rts *ResourceTypeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rts *ResourceTypeSelect) Float64X(ctx context.Context) float64 {
	v, err := rts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (rts *ResourceTypeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rts.fields) > 1 {
		return nil, errors.New("ent: ResourceTypeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rts *ResourceTypeSelect) BoolsX(ctx context.Context) []bool {
	v, err := rts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (rts *ResourceTypeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{resourcetype.Label}
	default:
		err = fmt.Errorf("ent: ResourceTypeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rts *ResourceTypeSelect) BoolX(ctx context.Context) bool {
	v, err := rts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rts *ResourceTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rts.fields {
		if !resourcetype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := rts.sqlQuery().Query()
	if err := rts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rts *ResourceTypeSelect) sqlQuery() sql.Querier {
	selector := rts.sql
	selector.Select(selector.Columns(rts.fields...)...)
	return selector
}
