// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (as *AllocationStrategy) Pools(ctx context.Context) ([]*ResourcePool, error) {
	result, err := as.NamedPools(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = as.QueryPools().All(ctx)
	}
	return result, err
}

func (as *AllocationStrategy) PoolPropertyTypes(ctx context.Context) ([]*PropertyType, error) {
	result, err := as.NamedPoolPropertyTypes(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = as.QueryPoolPropertyTypes().All(ctx)
	}
	return result, err
}

func (pp *PoolProperties) Pool(ctx context.Context) (*ResourcePool, error) {
	result, err := pp.Edges.PoolOrErr()
	if IsNotLoaded(err) {
		result, err = pp.QueryPool().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pp *PoolProperties) ResourceType(ctx context.Context) ([]*ResourceType, error) {
	result, err := pp.NamedResourceType(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = pp.QueryResourceType().All(ctx)
	}
	return result, err
}

func (pp *PoolProperties) Properties(ctx context.Context) ([]*Property, error) {
	result, err := pp.NamedProperties(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = pp.QueryProperties().All(ctx)
	}
	return result, err
}

func (pr *Property) Type(ctx context.Context) (*PropertyType, error) {
	result, err := pr.Edges.TypeOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryType().Only(ctx)
	}
	return result, err
}

func (pr *Property) Resources(ctx context.Context) (*Resource, error) {
	result, err := pr.Edges.ResourcesOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryResources().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pt *PropertyType) Properties(ctx context.Context) ([]*Property, error) {
	result, err := pt.NamedProperties(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = pt.QueryProperties().All(ctx)
	}
	return result, err
}

func (pt *PropertyType) ResourceType(ctx context.Context) (*ResourceType, error) {
	result, err := pt.Edges.ResourceTypeOrErr()
	if IsNotLoaded(err) {
		result, err = pt.QueryResourceType().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Resource) Pool(ctx context.Context) (*ResourcePool, error) {
	result, err := r.Edges.PoolOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryPool().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Resource) Properties(ctx context.Context) ([]*Property, error) {
	result, err := r.NamedProperties(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = r.QueryProperties().All(ctx)
	}
	return result, err
}

func (r *Resource) NestedPool(ctx context.Context) (*ResourcePool, error) {
	result, err := r.Edges.NestedPoolOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryNestedPool().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rp *ResourcePool) ResourceType(ctx context.Context) (*ResourceType, error) {
	result, err := rp.Edges.ResourceTypeOrErr()
	if IsNotLoaded(err) {
		result, err = rp.QueryResourceType().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rp *ResourcePool) Tags(ctx context.Context) ([]*Tag, error) {
	result, err := rp.NamedTags(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = rp.QueryTags().All(ctx)
	}
	return result, err
}

func (rp *ResourcePool) Claims(ctx context.Context) ([]*Resource, error) {
	result, err := rp.NamedClaims(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = rp.QueryClaims().All(ctx)
	}
	return result, err
}

func (rp *ResourcePool) PoolProperties(ctx context.Context) (*PoolProperties, error) {
	result, err := rp.Edges.PoolPropertiesOrErr()
	if IsNotLoaded(err) {
		result, err = rp.QueryPoolProperties().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rp *ResourcePool) AllocationStrategy(ctx context.Context) (*AllocationStrategy, error) {
	result, err := rp.Edges.AllocationStrategyOrErr()
	if IsNotLoaded(err) {
		result, err = rp.QueryAllocationStrategy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rp *ResourcePool) ParentResource(ctx context.Context) (*Resource, error) {
	result, err := rp.Edges.ParentResourceOrErr()
	if IsNotLoaded(err) {
		result, err = rp.QueryParentResource().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rt *ResourceType) PropertyTypes(ctx context.Context) ([]*PropertyType, error) {
	result, err := rt.NamedPropertyTypes(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = rt.QueryPropertyTypes().All(ctx)
	}
	return result, err
}

func (rt *ResourceType) Pools(ctx context.Context) ([]*ResourcePool, error) {
	result, err := rt.NamedPools(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = rt.QueryPools().All(ctx)
	}
	return result, err
}

func (rt *ResourceType) PoolProperties(ctx context.Context) ([]*PoolProperties, error) {
	result, err := rt.NamedPoolProperties(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = rt.QueryPoolProperties().All(ctx)
	}
	return result, err
}

func (t *Tag) Pools(ctx context.Context) ([]*ResourcePool, error) {
	result, err := t.NamedPools(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = t.QueryPools().All(ctx)
	}
	return result, err
}
