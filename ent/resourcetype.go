// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/net-auto/resourceManager/ent/resourcetype"
)

// ResourceType is the model entity for the ResourceType schema.
type ResourceType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceTypeQuery when eager-loading is set.
	Edges ResourceTypeEdges `json:"edges"`
}

// ResourceTypeEdges holds the relations/edges for other nodes in the graph.
type ResourceTypeEdges struct {
	// PropertyTypes holds the value of the property_types edge.
	PropertyTypes []*PropertyType `json:"property_types,omitempty"`
	// Pools holds the value of the pools edge.
	Pools []*ResourcePool `json:"pools,omitempty"`
	// PoolProperties holds the value of the pool_properties edge.
	PoolProperties []*PoolProperties `json:"pool_properties,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PropertyTypesOrErr returns the PropertyTypes value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceTypeEdges) PropertyTypesOrErr() ([]*PropertyType, error) {
	if e.loadedTypes[0] {
		return e.PropertyTypes, nil
	}
	return nil, &NotLoadedError{edge: "property_types"}
}

// PoolsOrErr returns the Pools value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceTypeEdges) PoolsOrErr() ([]*ResourcePool, error) {
	if e.loadedTypes[1] {
		return e.Pools, nil
	}
	return nil, &NotLoadedError{edge: "pools"}
}

// PoolPropertiesOrErr returns the PoolProperties value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceTypeEdges) PoolPropertiesOrErr() ([]*PoolProperties, error) {
	if e.loadedTypes[2] {
		return e.PoolProperties, nil
	}
	return nil, &NotLoadedError{edge: "pool_properties"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourceType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resourcetype.FieldID:
			values[i] = new(sql.NullInt64)
		case resourcetype.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ResourceType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourceType fields.
func (rt *ResourceType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resourcetype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rt.ID = int(value.Int64)
		case resourcetype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rt.Name = value.String
			}
		}
	}
	return nil
}

// QueryPropertyTypes queries the "property_types" edge of the ResourceType entity.
func (rt *ResourceType) QueryPropertyTypes() *PropertyTypeQuery {
	return (&ResourceTypeClient{config: rt.config}).QueryPropertyTypes(rt)
}

// QueryPools queries the "pools" edge of the ResourceType entity.
func (rt *ResourceType) QueryPools() *ResourcePoolQuery {
	return (&ResourceTypeClient{config: rt.config}).QueryPools(rt)
}

// QueryPoolProperties queries the "pool_properties" edge of the ResourceType entity.
func (rt *ResourceType) QueryPoolProperties() *PoolPropertiesQuery {
	return (&ResourceTypeClient{config: rt.config}).QueryPoolProperties(rt)
}

// Update returns a builder for updating this ResourceType.
// Note that you need to call ResourceType.Unwrap() before calling this method if this ResourceType
// was returned from a transaction, and the transaction was committed or rolled back.
func (rt *ResourceType) Update() *ResourceTypeUpdateOne {
	return (&ResourceTypeClient{config: rt.config}).UpdateOne(rt)
}

// Unwrap unwraps the ResourceType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rt *ResourceType) Unwrap() *ResourceType {
	_tx, ok := rt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResourceType is not a transactional entity")
	}
	rt.config.driver = _tx.drv
	return rt
}

// String implements the fmt.Stringer.
func (rt *ResourceType) String() string {
	var builder strings.Builder
	builder.WriteString("ResourceType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rt.ID))
	builder.WriteString("name=")
	builder.WriteString(rt.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ResourceTypes is a parsable slice of ResourceType.
type ResourceTypes []*ResourceType

func (rt ResourceTypes) config(cfg config) {
	for _i := range rt {
		rt[_i].config = cfg
	}
}
