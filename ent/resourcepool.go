// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/net-auto/resourceManager/ent/allocationstrategy"
	"github.com/net-auto/resourceManager/ent/poolproperties"
	"github.com/net-auto/resourceManager/ent/resource"
	"github.com/net-auto/resourceManager/ent/resourcepool"
	"github.com/net-auto/resourceManager/ent/resourcetype"
)

// ResourcePool is the model entity for the ResourcePool schema.
type ResourcePool struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// PoolType holds the value of the "pool_type" field.
	PoolType resourcepool.PoolType `json:"pool_type,omitempty"`
	// How long to keep resources unavailable after dealocation (in seconds). -1 release never, 0 release immediately
	DealocationSafetyPeriod int `json:"dealocation_safety_period,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourcePoolQuery when eager-loading is set.
	Edges                             ResourcePoolEdges `json:"edges"`
	resource_nested_pool              *int
	resource_pool_allocation_strategy *int
	resource_type_pools               *int
}

// ResourcePoolEdges holds the relations/edges for other nodes in the graph.
type ResourcePoolEdges struct {
	// ResourceType holds the value of the resource_type edge.
	ResourceType *ResourceType `json:"resource_type,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Claims holds the value of the claims edge.
	Claims []*Resource `json:"claims,omitempty"`
	// PoolProperties holds the value of the poolProperties edge.
	PoolProperties *PoolProperties `json:"poolProperties,omitempty"`
	// AllocationStrategy holds the value of the allocation_strategy edge.
	AllocationStrategy *AllocationStrategy `json:"allocation_strategy,omitempty"`
	// pool hierarchies can use this link between resource and pool
	ParentResource *Resource `json:"parent_resource,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int

	namedTags   map[string][]*Tag
	namedClaims map[string][]*Resource
}

// ResourceTypeOrErr returns the ResourceType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourcePoolEdges) ResourceTypeOrErr() (*ResourceType, error) {
	if e.loadedTypes[0] {
		if e.ResourceType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: resourcetype.Label}
		}
		return e.ResourceType, nil
	}
	return nil, &NotLoadedError{edge: "resource_type"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e ResourcePoolEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[1] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// ClaimsOrErr returns the Claims value or an error if the edge
// was not loaded in eager-loading.
func (e ResourcePoolEdges) ClaimsOrErr() ([]*Resource, error) {
	if e.loadedTypes[2] {
		return e.Claims, nil
	}
	return nil, &NotLoadedError{edge: "claims"}
}

// PoolPropertiesOrErr returns the PoolProperties value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourcePoolEdges) PoolPropertiesOrErr() (*PoolProperties, error) {
	if e.loadedTypes[3] {
		if e.PoolProperties == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: poolproperties.Label}
		}
		return e.PoolProperties, nil
	}
	return nil, &NotLoadedError{edge: "poolProperties"}
}

// AllocationStrategyOrErr returns the AllocationStrategy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourcePoolEdges) AllocationStrategyOrErr() (*AllocationStrategy, error) {
	if e.loadedTypes[4] {
		if e.AllocationStrategy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: allocationstrategy.Label}
		}
		return e.AllocationStrategy, nil
	}
	return nil, &NotLoadedError{edge: "allocation_strategy"}
}

// ParentResourceOrErr returns the ParentResource value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourcePoolEdges) ParentResourceOrErr() (*Resource, error) {
	if e.loadedTypes[5] {
		if e.ParentResource == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: resource.Label}
		}
		return e.ParentResource, nil
	}
	return nil, &NotLoadedError{edge: "parent_resource"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourcePool) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resourcepool.FieldID, resourcepool.FieldDealocationSafetyPeriod:
			values[i] = new(sql.NullInt64)
		case resourcepool.FieldName, resourcepool.FieldDescription, resourcepool.FieldPoolType:
			values[i] = new(sql.NullString)
		case resourcepool.ForeignKeys[0]: // resource_nested_pool
			values[i] = new(sql.NullInt64)
		case resourcepool.ForeignKeys[1]: // resource_pool_allocation_strategy
			values[i] = new(sql.NullInt64)
		case resourcepool.ForeignKeys[2]: // resource_type_pools
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ResourcePool", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourcePool fields.
func (rp *ResourcePool) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resourcepool.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rp.ID = int(value.Int64)
		case resourcepool.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rp.Name = value.String
			}
		case resourcepool.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rp.Description = new(string)
				*rp.Description = value.String
			}
		case resourcepool.FieldPoolType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pool_type", values[i])
			} else if value.Valid {
				rp.PoolType = resourcepool.PoolType(value.String)
			}
		case resourcepool.FieldDealocationSafetyPeriod:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dealocation_safety_period", values[i])
			} else if value.Valid {
				rp.DealocationSafetyPeriod = int(value.Int64)
			}
		case resourcepool.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field resource_nested_pool", value)
			} else if value.Valid {
				rp.resource_nested_pool = new(int)
				*rp.resource_nested_pool = int(value.Int64)
			}
		case resourcepool.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field resource_pool_allocation_strategy", value)
			} else if value.Valid {
				rp.resource_pool_allocation_strategy = new(int)
				*rp.resource_pool_allocation_strategy = int(value.Int64)
			}
		case resourcepool.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field resource_type_pools", value)
			} else if value.Valid {
				rp.resource_type_pools = new(int)
				*rp.resource_type_pools = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryResourceType queries the "resource_type" edge of the ResourcePool entity.
func (rp *ResourcePool) QueryResourceType() *ResourceTypeQuery {
	return (&ResourcePoolClient{config: rp.config}).QueryResourceType(rp)
}

// QueryTags queries the "tags" edge of the ResourcePool entity.
func (rp *ResourcePool) QueryTags() *TagQuery {
	return (&ResourcePoolClient{config: rp.config}).QueryTags(rp)
}

// QueryClaims queries the "claims" edge of the ResourcePool entity.
func (rp *ResourcePool) QueryClaims() *ResourceQuery {
	return (&ResourcePoolClient{config: rp.config}).QueryClaims(rp)
}

// QueryPoolProperties queries the "poolProperties" edge of the ResourcePool entity.
func (rp *ResourcePool) QueryPoolProperties() *PoolPropertiesQuery {
	return (&ResourcePoolClient{config: rp.config}).QueryPoolProperties(rp)
}

// QueryAllocationStrategy queries the "allocation_strategy" edge of the ResourcePool entity.
func (rp *ResourcePool) QueryAllocationStrategy() *AllocationStrategyQuery {
	return (&ResourcePoolClient{config: rp.config}).QueryAllocationStrategy(rp)
}

// QueryParentResource queries the "parent_resource" edge of the ResourcePool entity.
func (rp *ResourcePool) QueryParentResource() *ResourceQuery {
	return (&ResourcePoolClient{config: rp.config}).QueryParentResource(rp)
}

// Update returns a builder for updating this ResourcePool.
// Note that you need to call ResourcePool.Unwrap() before calling this method if this ResourcePool
// was returned from a transaction, and the transaction was committed or rolled back.
func (rp *ResourcePool) Update() *ResourcePoolUpdateOne {
	return (&ResourcePoolClient{config: rp.config}).UpdateOne(rp)
}

// Unwrap unwraps the ResourcePool entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rp *ResourcePool) Unwrap() *ResourcePool {
	_tx, ok := rp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResourcePool is not a transactional entity")
	}
	rp.config.driver = _tx.drv
	return rp
}

// String implements the fmt.Stringer.
func (rp *ResourcePool) String() string {
	var builder strings.Builder
	builder.WriteString("ResourcePool(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rp.ID))
	builder.WriteString("name=")
	builder.WriteString(rp.Name)
	builder.WriteString(", ")
	if v := rp.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("pool_type=")
	builder.WriteString(fmt.Sprintf("%v", rp.PoolType))
	builder.WriteString(", ")
	builder.WriteString("dealocation_safety_period=")
	builder.WriteString(fmt.Sprintf("%v", rp.DealocationSafetyPeriod))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTags returns the Tags named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rp *ResourcePool) NamedTags(name string) ([]*Tag, error) {
	if rp.Edges.namedTags == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rp.Edges.namedTags[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rp *ResourcePool) appendNamedTags(name string, edges ...*Tag) {
	if rp.Edges.namedTags == nil {
		rp.Edges.namedTags = make(map[string][]*Tag)
	}
	if len(edges) == 0 {
		rp.Edges.namedTags[name] = []*Tag{}
	} else {
		rp.Edges.namedTags[name] = append(rp.Edges.namedTags[name], edges...)
	}
}

// NamedClaims returns the Claims named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rp *ResourcePool) NamedClaims(name string) ([]*Resource, error) {
	if rp.Edges.namedClaims == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rp.Edges.namedClaims[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rp *ResourcePool) appendNamedClaims(name string, edges ...*Resource) {
	if rp.Edges.namedClaims == nil {
		rp.Edges.namedClaims = make(map[string][]*Resource)
	}
	if len(edges) == 0 {
		rp.Edges.namedClaims[name] = []*Resource{}
	} else {
		rp.Edges.namedClaims[name] = append(rp.Edges.namedClaims[name], edges...)
	}
}

// ResourcePools is a parsable slice of ResourcePool.
type ResourcePools []*ResourcePool

func (rp ResourcePools) config(cfg config) {
	for _i := range rp {
		rp[_i].config = cfg
	}
}
