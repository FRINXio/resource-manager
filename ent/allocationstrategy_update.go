// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/net-auto/resourceManager/ent/allocationstrategy"
	"github.com/net-auto/resourceManager/ent/predicate"
	"github.com/net-auto/resourceManager/ent/resourcepool"
)

// AllocationStrategyUpdate is the builder for updating AllocationStrategy entities.
type AllocationStrategyUpdate struct {
	config
	hooks      []Hook
	mutation   *AllocationStrategyMutation
	predicates []predicate.AllocationStrategy
}

// Where adds a new predicate for the builder.
func (asu *AllocationStrategyUpdate) Where(ps ...predicate.AllocationStrategy) *AllocationStrategyUpdate {
	asu.predicates = append(asu.predicates, ps...)
	return asu
}

// SetName sets the name field.
func (asu *AllocationStrategyUpdate) SetName(s string) *AllocationStrategyUpdate {
	asu.mutation.SetName(s)
	return asu
}

// SetLang sets the lang field.
func (asu *AllocationStrategyUpdate) SetLang(a allocationstrategy.Lang) *AllocationStrategyUpdate {
	asu.mutation.SetLang(a)
	return asu
}

// SetNillableLang sets the lang field if the given value is not nil.
func (asu *AllocationStrategyUpdate) SetNillableLang(a *allocationstrategy.Lang) *AllocationStrategyUpdate {
	if a != nil {
		asu.SetLang(*a)
	}
	return asu
}

// SetScript sets the script field.
func (asu *AllocationStrategyUpdate) SetScript(s string) *AllocationStrategyUpdate {
	asu.mutation.SetScript(s)
	return asu
}

// AddPoolIDs adds the pools edge to ResourcePool by ids.
func (asu *AllocationStrategyUpdate) AddPoolIDs(ids ...int) *AllocationStrategyUpdate {
	asu.mutation.AddPoolIDs(ids...)
	return asu
}

// AddPools adds the pools edges to ResourcePool.
func (asu *AllocationStrategyUpdate) AddPools(r ...*ResourcePool) *AllocationStrategyUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return asu.AddPoolIDs(ids...)
}

// Mutation returns the AllocationStrategyMutation object of the builder.
func (asu *AllocationStrategyUpdate) Mutation() *AllocationStrategyMutation {
	return asu.mutation
}

// RemovePoolIDs removes the pools edge to ResourcePool by ids.
func (asu *AllocationStrategyUpdate) RemovePoolIDs(ids ...int) *AllocationStrategyUpdate {
	asu.mutation.RemovePoolIDs(ids...)
	return asu
}

// RemovePools removes pools edges to ResourcePool.
func (asu *AllocationStrategyUpdate) RemovePools(r ...*ResourcePool) *AllocationStrategyUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return asu.RemovePoolIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (asu *AllocationStrategyUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := asu.mutation.Name(); ok {
		if err := allocationstrategy.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := asu.mutation.Lang(); ok {
		if err := allocationstrategy.LangValidator(v); err != nil {
			return 0, &ValidationError{Name: "lang", err: fmt.Errorf("ent: validator failed for field \"lang\": %w", err)}
		}
	}
	if v, ok := asu.mutation.Script(); ok {
		if err := allocationstrategy.ScriptValidator(v); err != nil {
			return 0, &ValidationError{Name: "script", err: fmt.Errorf("ent: validator failed for field \"script\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(asu.hooks) == 0 {
		affected, err = asu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AllocationStrategyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asu.mutation = mutation
			affected, err = asu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(asu.hooks) - 1; i >= 0; i-- {
			mut = asu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AllocationStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AllocationStrategyUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AllocationStrategyUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asu *AllocationStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   allocationstrategy.Table,
			Columns: allocationstrategy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: allocationstrategy.FieldID,
			},
		},
	}
	if ps := asu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: allocationstrategy.FieldName,
		})
	}
	if value, ok := asu.mutation.Lang(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: allocationstrategy.FieldLang,
		})
	}
	if value, ok := asu.mutation.Script(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: allocationstrategy.FieldScript,
		})
	}
	if nodes := asu.mutation.RemovedPoolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   allocationstrategy.PoolsTable,
			Columns: []string{allocationstrategy.PoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcepool.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.PoolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   allocationstrategy.PoolsTable,
			Columns: []string{allocationstrategy.PoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcepool.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{allocationstrategy.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AllocationStrategyUpdateOne is the builder for updating a single AllocationStrategy entity.
type AllocationStrategyUpdateOne struct {
	config
	hooks    []Hook
	mutation *AllocationStrategyMutation
}

// SetName sets the name field.
func (asuo *AllocationStrategyUpdateOne) SetName(s string) *AllocationStrategyUpdateOne {
	asuo.mutation.SetName(s)
	return asuo
}

// SetLang sets the lang field.
func (asuo *AllocationStrategyUpdateOne) SetLang(a allocationstrategy.Lang) *AllocationStrategyUpdateOne {
	asuo.mutation.SetLang(a)
	return asuo
}

// SetNillableLang sets the lang field if the given value is not nil.
func (asuo *AllocationStrategyUpdateOne) SetNillableLang(a *allocationstrategy.Lang) *AllocationStrategyUpdateOne {
	if a != nil {
		asuo.SetLang(*a)
	}
	return asuo
}

// SetScript sets the script field.
func (asuo *AllocationStrategyUpdateOne) SetScript(s string) *AllocationStrategyUpdateOne {
	asuo.mutation.SetScript(s)
	return asuo
}

// AddPoolIDs adds the pools edge to ResourcePool by ids.
func (asuo *AllocationStrategyUpdateOne) AddPoolIDs(ids ...int) *AllocationStrategyUpdateOne {
	asuo.mutation.AddPoolIDs(ids...)
	return asuo
}

// AddPools adds the pools edges to ResourcePool.
func (asuo *AllocationStrategyUpdateOne) AddPools(r ...*ResourcePool) *AllocationStrategyUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return asuo.AddPoolIDs(ids...)
}

// Mutation returns the AllocationStrategyMutation object of the builder.
func (asuo *AllocationStrategyUpdateOne) Mutation() *AllocationStrategyMutation {
	return asuo.mutation
}

// RemovePoolIDs removes the pools edge to ResourcePool by ids.
func (asuo *AllocationStrategyUpdateOne) RemovePoolIDs(ids ...int) *AllocationStrategyUpdateOne {
	asuo.mutation.RemovePoolIDs(ids...)
	return asuo
}

// RemovePools removes pools edges to ResourcePool.
func (asuo *AllocationStrategyUpdateOne) RemovePools(r ...*ResourcePool) *AllocationStrategyUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return asuo.RemovePoolIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (asuo *AllocationStrategyUpdateOne) Save(ctx context.Context) (*AllocationStrategy, error) {
	if v, ok := asuo.mutation.Name(); ok {
		if err := allocationstrategy.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := asuo.mutation.Lang(); ok {
		if err := allocationstrategy.LangValidator(v); err != nil {
			return nil, &ValidationError{Name: "lang", err: fmt.Errorf("ent: validator failed for field \"lang\": %w", err)}
		}
	}
	if v, ok := asuo.mutation.Script(); ok {
		if err := allocationstrategy.ScriptValidator(v); err != nil {
			return nil, &ValidationError{Name: "script", err: fmt.Errorf("ent: validator failed for field \"script\": %w", err)}
		}
	}

	var (
		err  error
		node *AllocationStrategy
	)
	if len(asuo.hooks) == 0 {
		node, err = asuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AllocationStrategyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asuo.mutation = mutation
			node, err = asuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(asuo.hooks) - 1; i >= 0; i-- {
			mut = asuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AllocationStrategyUpdateOne) SaveX(ctx context.Context) *AllocationStrategy {
	as, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return as
}

// Exec executes the query on the entity.
func (asuo *AllocationStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AllocationStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asuo *AllocationStrategyUpdateOne) sqlSave(ctx context.Context) (as *AllocationStrategy, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   allocationstrategy.Table,
			Columns: allocationstrategy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: allocationstrategy.FieldID,
			},
		},
	}
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AllocationStrategy.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := asuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: allocationstrategy.FieldName,
		})
	}
	if value, ok := asuo.mutation.Lang(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: allocationstrategy.FieldLang,
		})
	}
	if value, ok := asuo.mutation.Script(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: allocationstrategy.FieldScript,
		})
	}
	if nodes := asuo.mutation.RemovedPoolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   allocationstrategy.PoolsTable,
			Columns: []string{allocationstrategy.PoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcepool.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.PoolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   allocationstrategy.PoolsTable,
			Columns: []string{allocationstrategy.PoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcepool.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	as = &AllocationStrategy{config: asuo.config}
	_spec.Assign = as.assignValues
	_spec.ScanValues = as.scanValues()
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{allocationstrategy.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return as, nil
}
