// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/net-auto/resourceManager/ent/allocationstrategy"
	"github.com/net-auto/resourceManager/ent/predicate"
	"github.com/net-auto/resourceManager/ent/resource"
	"github.com/net-auto/resourceManager/ent/resourcepool"
	"github.com/net-auto/resourceManager/ent/resourcetype"
	"github.com/net-auto/resourceManager/ent/tag"
)

// ResourcePoolUpdate is the builder for updating ResourcePool entities.
type ResourcePoolUpdate struct {
	config
	hooks      []Hook
	mutation   *ResourcePoolMutation
	predicates []predicate.ResourcePool
}

// Where adds a new predicate for the builder.
func (rpu *ResourcePoolUpdate) Where(ps ...predicate.ResourcePool) *ResourcePoolUpdate {
	rpu.predicates = append(rpu.predicates, ps...)
	return rpu
}

// SetName sets the name field.
func (rpu *ResourcePoolUpdate) SetName(s string) *ResourcePoolUpdate {
	rpu.mutation.SetName(s)
	return rpu
}

// SetDescription sets the description field.
func (rpu *ResourcePoolUpdate) SetDescription(s string) *ResourcePoolUpdate {
	rpu.mutation.SetDescription(s)
	return rpu
}

// SetNillableDescription sets the description field if the given value is not nil.
func (rpu *ResourcePoolUpdate) SetNillableDescription(s *string) *ResourcePoolUpdate {
	if s != nil {
		rpu.SetDescription(*s)
	}
	return rpu
}

// ClearDescription clears the value of description.
func (rpu *ResourcePoolUpdate) ClearDescription() *ResourcePoolUpdate {
	rpu.mutation.ClearDescription()
	return rpu
}

// SetPoolType sets the pool_type field.
func (rpu *ResourcePoolUpdate) SetPoolType(rt resourcepool.PoolType) *ResourcePoolUpdate {
	rpu.mutation.SetPoolType(rt)
	return rpu
}

// SetDealocationSafetyPeriod sets the dealocation_safety_period field.
func (rpu *ResourcePoolUpdate) SetDealocationSafetyPeriod(i int) *ResourcePoolUpdate {
	rpu.mutation.ResetDealocationSafetyPeriod()
	rpu.mutation.SetDealocationSafetyPeriod(i)
	return rpu
}

// SetNillableDealocationSafetyPeriod sets the dealocation_safety_period field if the given value is not nil.
func (rpu *ResourcePoolUpdate) SetNillableDealocationSafetyPeriod(i *int) *ResourcePoolUpdate {
	if i != nil {
		rpu.SetDealocationSafetyPeriod(*i)
	}
	return rpu
}

// AddDealocationSafetyPeriod adds i to dealocation_safety_period.
func (rpu *ResourcePoolUpdate) AddDealocationSafetyPeriod(i int) *ResourcePoolUpdate {
	rpu.mutation.AddDealocationSafetyPeriod(i)
	return rpu
}

// SetResourceTypeID sets the resource_type edge to ResourceType by id.
func (rpu *ResourcePoolUpdate) SetResourceTypeID(id int) *ResourcePoolUpdate {
	rpu.mutation.SetResourceTypeID(id)
	return rpu
}

// SetNillableResourceTypeID sets the resource_type edge to ResourceType by id if the given value is not nil.
func (rpu *ResourcePoolUpdate) SetNillableResourceTypeID(id *int) *ResourcePoolUpdate {
	if id != nil {
		rpu = rpu.SetResourceTypeID(*id)
	}
	return rpu
}

// SetResourceType sets the resource_type edge to ResourceType.
func (rpu *ResourcePoolUpdate) SetResourceType(r *ResourceType) *ResourcePoolUpdate {
	return rpu.SetResourceTypeID(r.ID)
}

// AddTagIDs adds the tags edge to Tag by ids.
func (rpu *ResourcePoolUpdate) AddTagIDs(ids ...int) *ResourcePoolUpdate {
	rpu.mutation.AddTagIDs(ids...)
	return rpu
}

// AddTags adds the tags edges to Tag.
func (rpu *ResourcePoolUpdate) AddTags(t ...*Tag) *ResourcePoolUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rpu.AddTagIDs(ids...)
}

// AddClaimIDs adds the claims edge to Resource by ids.
func (rpu *ResourcePoolUpdate) AddClaimIDs(ids ...int) *ResourcePoolUpdate {
	rpu.mutation.AddClaimIDs(ids...)
	return rpu
}

// AddClaims adds the claims edges to Resource.
func (rpu *ResourcePoolUpdate) AddClaims(r ...*Resource) *ResourcePoolUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.AddClaimIDs(ids...)
}

// SetAllocationStrategyID sets the allocation_strategy edge to AllocationStrategy by id.
func (rpu *ResourcePoolUpdate) SetAllocationStrategyID(id int) *ResourcePoolUpdate {
	rpu.mutation.SetAllocationStrategyID(id)
	return rpu
}

// SetNillableAllocationStrategyID sets the allocation_strategy edge to AllocationStrategy by id if the given value is not nil.
func (rpu *ResourcePoolUpdate) SetNillableAllocationStrategyID(id *int) *ResourcePoolUpdate {
	if id != nil {
		rpu = rpu.SetAllocationStrategyID(*id)
	}
	return rpu
}

// SetAllocationStrategy sets the allocation_strategy edge to AllocationStrategy.
func (rpu *ResourcePoolUpdate) SetAllocationStrategy(a *AllocationStrategy) *ResourcePoolUpdate {
	return rpu.SetAllocationStrategyID(a.ID)
}

// SetParentResourceID sets the parent_resource edge to Resource by id.
func (rpu *ResourcePoolUpdate) SetParentResourceID(id int) *ResourcePoolUpdate {
	rpu.mutation.SetParentResourceID(id)
	return rpu
}

// SetNillableParentResourceID sets the parent_resource edge to Resource by id if the given value is not nil.
func (rpu *ResourcePoolUpdate) SetNillableParentResourceID(id *int) *ResourcePoolUpdate {
	if id != nil {
		rpu = rpu.SetParentResourceID(*id)
	}
	return rpu
}

// SetParentResource sets the parent_resource edge to Resource.
func (rpu *ResourcePoolUpdate) SetParentResource(r *Resource) *ResourcePoolUpdate {
	return rpu.SetParentResourceID(r.ID)
}

// Mutation returns the ResourcePoolMutation object of the builder.
func (rpu *ResourcePoolUpdate) Mutation() *ResourcePoolMutation {
	return rpu.mutation
}

// ClearResourceType clears the "resource_type" edge to type ResourceType.
func (rpu *ResourcePoolUpdate) ClearResourceType() *ResourcePoolUpdate {
	rpu.mutation.ClearResourceType()
	return rpu
}

// ClearTags clears all "tags" edges to type Tag.
func (rpu *ResourcePoolUpdate) ClearTags() *ResourcePoolUpdate {
	rpu.mutation.ClearTags()
	return rpu
}

// RemoveTagIDs removes the tags edge to Tag by ids.
func (rpu *ResourcePoolUpdate) RemoveTagIDs(ids ...int) *ResourcePoolUpdate {
	rpu.mutation.RemoveTagIDs(ids...)
	return rpu
}

// RemoveTags removes tags edges to Tag.
func (rpu *ResourcePoolUpdate) RemoveTags(t ...*Tag) *ResourcePoolUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rpu.RemoveTagIDs(ids...)
}

// ClearClaims clears all "claims" edges to type Resource.
func (rpu *ResourcePoolUpdate) ClearClaims() *ResourcePoolUpdate {
	rpu.mutation.ClearClaims()
	return rpu
}

// RemoveClaimIDs removes the claims edge to Resource by ids.
func (rpu *ResourcePoolUpdate) RemoveClaimIDs(ids ...int) *ResourcePoolUpdate {
	rpu.mutation.RemoveClaimIDs(ids...)
	return rpu
}

// RemoveClaims removes claims edges to Resource.
func (rpu *ResourcePoolUpdate) RemoveClaims(r ...*Resource) *ResourcePoolUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.RemoveClaimIDs(ids...)
}

// ClearAllocationStrategy clears the "allocation_strategy" edge to type AllocationStrategy.
func (rpu *ResourcePoolUpdate) ClearAllocationStrategy() *ResourcePoolUpdate {
	rpu.mutation.ClearAllocationStrategy()
	return rpu
}

// ClearParentResource clears the "parent_resource" edge to type Resource.
func (rpu *ResourcePoolUpdate) ClearParentResource() *ResourcePoolUpdate {
	rpu.mutation.ClearParentResource()
	return rpu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (rpu *ResourcePoolUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := rpu.mutation.Name(); ok {
		if err := resourcepool.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := rpu.mutation.PoolType(); ok {
		if err := resourcepool.PoolTypeValidator(v); err != nil {
			return 0, &ValidationError{Name: "pool_type", err: fmt.Errorf("ent: validator failed for field \"pool_type\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(rpu.hooks) == 0 {
		affected, err = rpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourcePoolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rpu.mutation = mutation
			affected, err = rpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rpu.hooks) - 1; i >= 0; i-- {
			mut = rpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *ResourcePoolUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *ResourcePoolUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *ResourcePoolUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpu *ResourcePoolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcepool.Table,
			Columns: resourcepool.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcepool.FieldID,
			},
		},
	}
	if ps := rpu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepool.FieldName,
		})
	}
	if value, ok := rpu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepool.FieldDescription,
		})
	}
	if rpu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcepool.FieldDescription,
		})
	}
	if value, ok := rpu.mutation.PoolType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcepool.FieldPoolType,
		})
	}
	if value, ok := rpu.mutation.DealocationSafetyPeriod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepool.FieldDealocationSafetyPeriod,
		})
	}
	if value, ok := rpu.mutation.AddedDealocationSafetyPeriod(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepool.FieldDealocationSafetyPeriod,
		})
	}
	if rpu.mutation.ResourceTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepool.ResourceTypeTable,
			Columns: []string{resourcepool.ResourceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.ResourceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepool.ResourceTypeTable,
			Columns: []string{resourcepool.ResourceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resourcepool.TagsTable,
			Columns: resourcepool.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !rpu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resourcepool.TagsTable,
			Columns: resourcepool.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resourcepool.TagsTable,
			Columns: resourcepool.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.ClaimsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcepool.ClaimsTable,
			Columns: []string{resourcepool.ClaimsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RemovedClaimsIDs(); len(nodes) > 0 && !rpu.mutation.ClaimsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcepool.ClaimsTable,
			Columns: []string{resourcepool.ClaimsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.ClaimsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcepool.ClaimsTable,
			Columns: []string{resourcepool.ClaimsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.AllocationStrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resourcepool.AllocationStrategyTable,
			Columns: []string{resourcepool.AllocationStrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: allocationstrategy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.AllocationStrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resourcepool.AllocationStrategyTable,
			Columns: []string{resourcepool.AllocationStrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: allocationstrategy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.ParentResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   resourcepool.ParentResourceTable,
			Columns: []string{resourcepool.ParentResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.ParentResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   resourcepool.ParentResourceTable,
			Columns: []string{resourcepool.ParentResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcepool.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourcePoolUpdateOne is the builder for updating a single ResourcePool entity.
type ResourcePoolUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourcePoolMutation
}

// SetName sets the name field.
func (rpuo *ResourcePoolUpdateOne) SetName(s string) *ResourcePoolUpdateOne {
	rpuo.mutation.SetName(s)
	return rpuo
}

// SetDescription sets the description field.
func (rpuo *ResourcePoolUpdateOne) SetDescription(s string) *ResourcePoolUpdateOne {
	rpuo.mutation.SetDescription(s)
	return rpuo
}

// SetNillableDescription sets the description field if the given value is not nil.
func (rpuo *ResourcePoolUpdateOne) SetNillableDescription(s *string) *ResourcePoolUpdateOne {
	if s != nil {
		rpuo.SetDescription(*s)
	}
	return rpuo
}

// ClearDescription clears the value of description.
func (rpuo *ResourcePoolUpdateOne) ClearDescription() *ResourcePoolUpdateOne {
	rpuo.mutation.ClearDescription()
	return rpuo
}

// SetPoolType sets the pool_type field.
func (rpuo *ResourcePoolUpdateOne) SetPoolType(rt resourcepool.PoolType) *ResourcePoolUpdateOne {
	rpuo.mutation.SetPoolType(rt)
	return rpuo
}

// SetDealocationSafetyPeriod sets the dealocation_safety_period field.
func (rpuo *ResourcePoolUpdateOne) SetDealocationSafetyPeriod(i int) *ResourcePoolUpdateOne {
	rpuo.mutation.ResetDealocationSafetyPeriod()
	rpuo.mutation.SetDealocationSafetyPeriod(i)
	return rpuo
}

// SetNillableDealocationSafetyPeriod sets the dealocation_safety_period field if the given value is not nil.
func (rpuo *ResourcePoolUpdateOne) SetNillableDealocationSafetyPeriod(i *int) *ResourcePoolUpdateOne {
	if i != nil {
		rpuo.SetDealocationSafetyPeriod(*i)
	}
	return rpuo
}

// AddDealocationSafetyPeriod adds i to dealocation_safety_period.
func (rpuo *ResourcePoolUpdateOne) AddDealocationSafetyPeriod(i int) *ResourcePoolUpdateOne {
	rpuo.mutation.AddDealocationSafetyPeriod(i)
	return rpuo
}

// SetResourceTypeID sets the resource_type edge to ResourceType by id.
func (rpuo *ResourcePoolUpdateOne) SetResourceTypeID(id int) *ResourcePoolUpdateOne {
	rpuo.mutation.SetResourceTypeID(id)
	return rpuo
}

// SetNillableResourceTypeID sets the resource_type edge to ResourceType by id if the given value is not nil.
func (rpuo *ResourcePoolUpdateOne) SetNillableResourceTypeID(id *int) *ResourcePoolUpdateOne {
	if id != nil {
		rpuo = rpuo.SetResourceTypeID(*id)
	}
	return rpuo
}

// SetResourceType sets the resource_type edge to ResourceType.
func (rpuo *ResourcePoolUpdateOne) SetResourceType(r *ResourceType) *ResourcePoolUpdateOne {
	return rpuo.SetResourceTypeID(r.ID)
}

// AddTagIDs adds the tags edge to Tag by ids.
func (rpuo *ResourcePoolUpdateOne) AddTagIDs(ids ...int) *ResourcePoolUpdateOne {
	rpuo.mutation.AddTagIDs(ids...)
	return rpuo
}

// AddTags adds the tags edges to Tag.
func (rpuo *ResourcePoolUpdateOne) AddTags(t ...*Tag) *ResourcePoolUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rpuo.AddTagIDs(ids...)
}

// AddClaimIDs adds the claims edge to Resource by ids.
func (rpuo *ResourcePoolUpdateOne) AddClaimIDs(ids ...int) *ResourcePoolUpdateOne {
	rpuo.mutation.AddClaimIDs(ids...)
	return rpuo
}

// AddClaims adds the claims edges to Resource.
func (rpuo *ResourcePoolUpdateOne) AddClaims(r ...*Resource) *ResourcePoolUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.AddClaimIDs(ids...)
}

// SetAllocationStrategyID sets the allocation_strategy edge to AllocationStrategy by id.
func (rpuo *ResourcePoolUpdateOne) SetAllocationStrategyID(id int) *ResourcePoolUpdateOne {
	rpuo.mutation.SetAllocationStrategyID(id)
	return rpuo
}

// SetNillableAllocationStrategyID sets the allocation_strategy edge to AllocationStrategy by id if the given value is not nil.
func (rpuo *ResourcePoolUpdateOne) SetNillableAllocationStrategyID(id *int) *ResourcePoolUpdateOne {
	if id != nil {
		rpuo = rpuo.SetAllocationStrategyID(*id)
	}
	return rpuo
}

// SetAllocationStrategy sets the allocation_strategy edge to AllocationStrategy.
func (rpuo *ResourcePoolUpdateOne) SetAllocationStrategy(a *AllocationStrategy) *ResourcePoolUpdateOne {
	return rpuo.SetAllocationStrategyID(a.ID)
}

// SetParentResourceID sets the parent_resource edge to Resource by id.
func (rpuo *ResourcePoolUpdateOne) SetParentResourceID(id int) *ResourcePoolUpdateOne {
	rpuo.mutation.SetParentResourceID(id)
	return rpuo
}

// SetNillableParentResourceID sets the parent_resource edge to Resource by id if the given value is not nil.
func (rpuo *ResourcePoolUpdateOne) SetNillableParentResourceID(id *int) *ResourcePoolUpdateOne {
	if id != nil {
		rpuo = rpuo.SetParentResourceID(*id)
	}
	return rpuo
}

// SetParentResource sets the parent_resource edge to Resource.
func (rpuo *ResourcePoolUpdateOne) SetParentResource(r *Resource) *ResourcePoolUpdateOne {
	return rpuo.SetParentResourceID(r.ID)
}

// Mutation returns the ResourcePoolMutation object of the builder.
func (rpuo *ResourcePoolUpdateOne) Mutation() *ResourcePoolMutation {
	return rpuo.mutation
}

// ClearResourceType clears the "resource_type" edge to type ResourceType.
func (rpuo *ResourcePoolUpdateOne) ClearResourceType() *ResourcePoolUpdateOne {
	rpuo.mutation.ClearResourceType()
	return rpuo
}

// ClearTags clears all "tags" edges to type Tag.
func (rpuo *ResourcePoolUpdateOne) ClearTags() *ResourcePoolUpdateOne {
	rpuo.mutation.ClearTags()
	return rpuo
}

// RemoveTagIDs removes the tags edge to Tag by ids.
func (rpuo *ResourcePoolUpdateOne) RemoveTagIDs(ids ...int) *ResourcePoolUpdateOne {
	rpuo.mutation.RemoveTagIDs(ids...)
	return rpuo
}

// RemoveTags removes tags edges to Tag.
func (rpuo *ResourcePoolUpdateOne) RemoveTags(t ...*Tag) *ResourcePoolUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rpuo.RemoveTagIDs(ids...)
}

// ClearClaims clears all "claims" edges to type Resource.
func (rpuo *ResourcePoolUpdateOne) ClearClaims() *ResourcePoolUpdateOne {
	rpuo.mutation.ClearClaims()
	return rpuo
}

// RemoveClaimIDs removes the claims edge to Resource by ids.
func (rpuo *ResourcePoolUpdateOne) RemoveClaimIDs(ids ...int) *ResourcePoolUpdateOne {
	rpuo.mutation.RemoveClaimIDs(ids...)
	return rpuo
}

// RemoveClaims removes claims edges to Resource.
func (rpuo *ResourcePoolUpdateOne) RemoveClaims(r ...*Resource) *ResourcePoolUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.RemoveClaimIDs(ids...)
}

// ClearAllocationStrategy clears the "allocation_strategy" edge to type AllocationStrategy.
func (rpuo *ResourcePoolUpdateOne) ClearAllocationStrategy() *ResourcePoolUpdateOne {
	rpuo.mutation.ClearAllocationStrategy()
	return rpuo
}

// ClearParentResource clears the "parent_resource" edge to type Resource.
func (rpuo *ResourcePoolUpdateOne) ClearParentResource() *ResourcePoolUpdateOne {
	rpuo.mutation.ClearParentResource()
	return rpuo
}

// Save executes the query and returns the updated entity.
func (rpuo *ResourcePoolUpdateOne) Save(ctx context.Context) (*ResourcePool, error) {
	if v, ok := rpuo.mutation.Name(); ok {
		if err := resourcepool.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := rpuo.mutation.PoolType(); ok {
		if err := resourcepool.PoolTypeValidator(v); err != nil {
			return nil, &ValidationError{Name: "pool_type", err: fmt.Errorf("ent: validator failed for field \"pool_type\": %w", err)}
		}
	}

	var (
		err  error
		node *ResourcePool
	)
	if len(rpuo.hooks) == 0 {
		node, err = rpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourcePoolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rpuo.mutation = mutation
			node, err = rpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rpuo.hooks) - 1; i >= 0; i-- {
			mut = rpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *ResourcePoolUpdateOne) SaveX(ctx context.Context) *ResourcePool {
	rp, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return rp
}

// Exec executes the query on the entity.
func (rpuo *ResourcePoolUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *ResourcePoolUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpuo *ResourcePoolUpdateOne) sqlSave(ctx context.Context) (rp *ResourcePool, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcepool.Table,
			Columns: resourcepool.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourcepool.FieldID,
			},
		},
	}
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourcePool.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepool.FieldName,
		})
	}
	if value, ok := rpuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcepool.FieldDescription,
		})
	}
	if rpuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcepool.FieldDescription,
		})
	}
	if value, ok := rpuo.mutation.PoolType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resourcepool.FieldPoolType,
		})
	}
	if value, ok := rpuo.mutation.DealocationSafetyPeriod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepool.FieldDealocationSafetyPeriod,
		})
	}
	if value, ok := rpuo.mutation.AddedDealocationSafetyPeriod(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourcepool.FieldDealocationSafetyPeriod,
		})
	}
	if rpuo.mutation.ResourceTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepool.ResourceTypeTable,
			Columns: []string{resourcepool.ResourceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.ResourceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcepool.ResourceTypeTable,
			Columns: []string{resourcepool.ResourceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resourcepool.TagsTable,
			Columns: resourcepool.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !rpuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resourcepool.TagsTable,
			Columns: resourcepool.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resourcepool.TagsTable,
			Columns: resourcepool.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.ClaimsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcepool.ClaimsTable,
			Columns: []string{resourcepool.ClaimsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RemovedClaimsIDs(); len(nodes) > 0 && !rpuo.mutation.ClaimsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcepool.ClaimsTable,
			Columns: []string{resourcepool.ClaimsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.ClaimsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcepool.ClaimsTable,
			Columns: []string{resourcepool.ClaimsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.AllocationStrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resourcepool.AllocationStrategyTable,
			Columns: []string{resourcepool.AllocationStrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: allocationstrategy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.AllocationStrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resourcepool.AllocationStrategyTable,
			Columns: []string{resourcepool.AllocationStrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: allocationstrategy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.ParentResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   resourcepool.ParentResourceTable,
			Columns: []string{resourcepool.ParentResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.ParentResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   resourcepool.ParentResourceTable,
			Columns: []string{resourcepool.ParentResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	rp = &ResourcePool{config: rpuo.config}
	_spec.Assign = rp.assignValues
	_spec.ScanValues = rp.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcepool.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return rp, nil
}
