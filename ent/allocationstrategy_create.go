// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/net-auto/resourceManager/ent/allocationstrategy"
	"github.com/net-auto/resourceManager/ent/resourcepool"
)

// AllocationStrategyCreate is the builder for creating a AllocationStrategy entity.
type AllocationStrategyCreate struct {
	config
	mutation *AllocationStrategyMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (asc *AllocationStrategyCreate) SetName(s string) *AllocationStrategyCreate {
	asc.mutation.SetName(s)
	return asc
}

// SetDescription sets the "description" field.
func (asc *AllocationStrategyCreate) SetDescription(s string) *AllocationStrategyCreate {
	asc.mutation.SetDescription(s)
	return asc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (asc *AllocationStrategyCreate) SetNillableDescription(s *string) *AllocationStrategyCreate {
	if s != nil {
		asc.SetDescription(*s)
	}
	return asc
}

// SetLang sets the "lang" field.
func (asc *AllocationStrategyCreate) SetLang(a allocationstrategy.Lang) *AllocationStrategyCreate {
	asc.mutation.SetLang(a)
	return asc
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (asc *AllocationStrategyCreate) SetNillableLang(a *allocationstrategy.Lang) *AllocationStrategyCreate {
	if a != nil {
		asc.SetLang(*a)
	}
	return asc
}

// SetScript sets the "script" field.
func (asc *AllocationStrategyCreate) SetScript(s string) *AllocationStrategyCreate {
	asc.mutation.SetScript(s)
	return asc
}

// AddPoolIDs adds the "pools" edge to the ResourcePool entity by IDs.
func (asc *AllocationStrategyCreate) AddPoolIDs(ids ...int) *AllocationStrategyCreate {
	asc.mutation.AddPoolIDs(ids...)
	return asc
}

// AddPools adds the "pools" edges to the ResourcePool entity.
func (asc *AllocationStrategyCreate) AddPools(r ...*ResourcePool) *AllocationStrategyCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return asc.AddPoolIDs(ids...)
}

// Mutation returns the AllocationStrategyMutation object of the builder.
func (asc *AllocationStrategyCreate) Mutation() *AllocationStrategyMutation {
	return asc.mutation
}

// Save creates the AllocationStrategy in the database.
func (asc *AllocationStrategyCreate) Save(ctx context.Context) (*AllocationStrategy, error) {
	var (
		err  error
		node *AllocationStrategy
	)
	if err := asc.defaults(); err != nil {
		return nil, err
	}
	if len(asc.hooks) == 0 {
		if err = asc.check(); err != nil {
			return nil, err
		}
		node, err = asc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AllocationStrategyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = asc.check(); err != nil {
				return nil, err
			}
			asc.mutation = mutation
			if node, err = asc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(asc.hooks) - 1; i >= 0; i-- {
			if asc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, asc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AllocationStrategy)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AllocationStrategyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AllocationStrategyCreate) SaveX(ctx context.Context) *AllocationStrategy {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AllocationStrategyCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AllocationStrategyCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AllocationStrategyCreate) defaults() error {
	if _, ok := asc.mutation.Lang(); !ok {
		v := allocationstrategy.DefaultLang
		asc.mutation.SetLang(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (asc *AllocationStrategyCreate) check() error {
	if _, ok := asc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AllocationStrategy.name"`)}
	}
	if v, ok := asc.mutation.Name(); ok {
		if err := allocationstrategy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AllocationStrategy.name": %w`, err)}
		}
	}
	if _, ok := asc.mutation.Lang(); !ok {
		return &ValidationError{Name: "lang", err: errors.New(`ent: missing required field "AllocationStrategy.lang"`)}
	}
	if v, ok := asc.mutation.Lang(); ok {
		if err := allocationstrategy.LangValidator(v); err != nil {
			return &ValidationError{Name: "lang", err: fmt.Errorf(`ent: validator failed for field "AllocationStrategy.lang": %w`, err)}
		}
	}
	if _, ok := asc.mutation.Script(); !ok {
		return &ValidationError{Name: "script", err: errors.New(`ent: missing required field "AllocationStrategy.script"`)}
	}
	if v, ok := asc.mutation.Script(); ok {
		if err := allocationstrategy.ScriptValidator(v); err != nil {
			return &ValidationError{Name: "script", err: fmt.Errorf(`ent: validator failed for field "AllocationStrategy.script": %w`, err)}
		}
	}
	return nil
}

func (asc *AllocationStrategyCreate) sqlSave(ctx context.Context) (*AllocationStrategy, error) {
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (asc *AllocationStrategyCreate) createSpec() (*AllocationStrategy, *sqlgraph.CreateSpec) {
	var (
		_node = &AllocationStrategy{config: asc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: allocationstrategy.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: allocationstrategy.FieldID,
			},
		}
	)
	if value, ok := asc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: allocationstrategy.FieldName,
		})
		_node.Name = value
	}
	if value, ok := asc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: allocationstrategy.FieldDescription,
		})
		_node.Description = &value
	}
	if value, ok := asc.mutation.Lang(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: allocationstrategy.FieldLang,
		})
		_node.Lang = value
	}
	if value, ok := asc.mutation.Script(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: allocationstrategy.FieldScript,
		})
		_node.Script = value
	}
	if nodes := asc.mutation.PoolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   allocationstrategy.PoolsTable,
			Columns: []string{allocationstrategy.PoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resourcepool.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AllocationStrategyCreateBulk is the builder for creating many AllocationStrategy entities in bulk.
type AllocationStrategyCreateBulk struct {
	config
	builders []*AllocationStrategyCreate
}

// Save creates the AllocationStrategy entities in the database.
func (ascb *AllocationStrategyCreateBulk) Save(ctx context.Context) ([]*AllocationStrategy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AllocationStrategy, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AllocationStrategyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AllocationStrategyCreateBulk) SaveX(ctx context.Context) []*AllocationStrategy {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AllocationStrategyCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AllocationStrategyCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}
