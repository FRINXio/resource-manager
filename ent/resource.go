// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/net-auto/resourceManager/ent/resource"
	"github.com/net-auto/resourceManager/ent/resourcepool"
)

// Resource is the model entity for the Resource schema.
type Resource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status resource.Status `json:"status,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// AlternateID holds the value of the "alternate_id" field.
	AlternateID map[string]interface{} `json:"alternate_id,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceQuery when eager-loading is set.
	Edges                ResourceEdges `json:"edges"`
	resource_pool_claims *int
}

// ResourceEdges holds the relations/edges for other nodes in the graph.
type ResourceEdges struct {
	// Pool holds the value of the pool edge.
	Pool *ResourcePool `json:"pool,omitempty"`
	// Properties holds the value of the properties edge.
	Properties []*Property `json:"properties,omitempty"`
	// pool hierarchies can use this link between resoruce and pool
	NestedPool *ResourcePool `json:"nested_pool,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PoolOrErr returns the Pool value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceEdges) PoolOrErr() (*ResourcePool, error) {
	if e.loadedTypes[0] {
		if e.Pool == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: resourcepool.Label}
		}
		return e.Pool, nil
	}
	return nil, &NotLoadedError{edge: "pool"}
}

// PropertiesOrErr returns the Properties value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) PropertiesOrErr() ([]*Property, error) {
	if e.loadedTypes[1] {
		return e.Properties, nil
	}
	return nil, &NotLoadedError{edge: "properties"}
}

// NestedPoolOrErr returns the NestedPool value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceEdges) NestedPoolOrErr() (*ResourcePool, error) {
	if e.loadedTypes[2] {
		if e.NestedPool == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: resourcepool.Label}
		}
		return e.NestedPool, nil
	}
	return nil, &NotLoadedError{edge: "nested_pool"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Resource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resource.FieldAlternateID:
			values[i] = new([]byte)
		case resource.FieldID:
			values[i] = new(sql.NullInt64)
		case resource.FieldStatus, resource.FieldDescription:
			values[i] = new(sql.NullString)
		case resource.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case resource.ForeignKeys[0]: // resource_pool_claims
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Resource", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Resource fields.
func (r *Resource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case resource.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = resource.Status(value.String)
			}
		case resource.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = new(string)
				*r.Description = value.String
			}
		case resource.FieldAlternateID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field alternate_id", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.AlternateID); err != nil {
					return fmt.Errorf("unmarshal field alternate_id: %w", err)
				}
			}
		case resource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case resource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field resource_pool_claims", value)
			} else if value.Valid {
				r.resource_pool_claims = new(int)
				*r.resource_pool_claims = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPool queries the "pool" edge of the Resource entity.
func (r *Resource) QueryPool() *ResourcePoolQuery {
	return (&ResourceClient{config: r.config}).QueryPool(r)
}

// QueryProperties queries the "properties" edge of the Resource entity.
func (r *Resource) QueryProperties() *PropertyQuery {
	return (&ResourceClient{config: r.config}).QueryProperties(r)
}

// QueryNestedPool queries the "nested_pool" edge of the Resource entity.
func (r *Resource) QueryNestedPool() *ResourcePoolQuery {
	return (&ResourceClient{config: r.config}).QueryNestedPool(r)
}

// Update returns a builder for updating this Resource.
// Note that you need to call Resource.Unwrap() before calling this method if this Resource
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Resource) Update() *ResourceUpdateOne {
	return (&ResourceClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Resource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Resource) Unwrap() *Resource {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Resource is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Resource) String() string {
	var builder strings.Builder
	builder.WriteString("Resource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", ")
	if v := r.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("alternate_id=")
	builder.WriteString(fmt.Sprintf("%v", r.AlternateID))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Resources is a parsable slice of Resource.
type Resources []*Resource

func (r Resources) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
