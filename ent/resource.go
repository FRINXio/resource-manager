// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/net-auto/resourceManager/ent/resource"
	"github.com/net-auto/resourceManager/ent/resourcepool"
)

// Resource is the model entity for the Resource schema.
type Resource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status resource.Status `json:"status,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceQuery when eager-loading is set.
	Edges                ResourceEdges `json:"edges"`
	resource_pool_claims *int
}

// ResourceEdges holds the relations/edges for other nodes in the graph.
type ResourceEdges struct {
	// Pool holds the value of the pool edge.
	Pool *ResourcePool
	// Properties holds the value of the properties edge.
	Properties []*Property
	// NestedPool holds the value of the nested_pool edge.
	NestedPool *ResourcePool
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PoolOrErr returns the Pool value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceEdges) PoolOrErr() (*ResourcePool, error) {
	if e.loadedTypes[0] {
		if e.Pool == nil {
			// The edge pool was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcepool.Label}
		}
		return e.Pool, nil
	}
	return nil, &NotLoadedError{edge: "pool"}
}

// PropertiesOrErr returns the Properties value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) PropertiesOrErr() ([]*Property, error) {
	if e.loadedTypes[1] {
		return e.Properties, nil
	}
	return nil, &NotLoadedError{edge: "properties"}
}

// NestedPoolOrErr returns the NestedPool value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceEdges) NestedPoolOrErr() (*ResourcePool, error) {
	if e.loadedTypes[2] {
		if e.NestedPool == nil {
			// The edge nested_pool was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resourcepool.Label}
		}
		return e.NestedPool, nil
	}
	return nil, &NotLoadedError{edge: "nested_pool"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Resource) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // status
		&sql.NullTime{},   // updated_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Resource) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // resource_pool_claims
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Resource fields.
func (r *Resource) assignValues(values ...interface{}) error {
	if m, n := len(values), len(resource.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[0])
	} else if value.Valid {
		r.Status = resource.Status(value.String)
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		r.UpdatedAt = value.Time
	}
	values = values[2:]
	if len(values) == len(resource.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field resource_pool_claims", value)
		} else if value.Valid {
			r.resource_pool_claims = new(int)
			*r.resource_pool_claims = int(value.Int64)
		}
	}
	return nil
}

// QueryPool queries the pool edge of the Resource.
func (r *Resource) QueryPool() *ResourcePoolQuery {
	return (&ResourceClient{config: r.config}).QueryPool(r)
}

// QueryProperties queries the properties edge of the Resource.
func (r *Resource) QueryProperties() *PropertyQuery {
	return (&ResourceClient{config: r.config}).QueryProperties(r)
}

// QueryNestedPool queries the nested_pool edge of the Resource.
func (r *Resource) QueryNestedPool() *ResourcePoolQuery {
	return (&ResourceClient{config: r.config}).QueryNestedPool(r)
}

// Update returns a builder for updating this Resource.
// Note that, you need to call Resource.Unwrap() before calling this method, if this Resource
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Resource) Update() *ResourceUpdateOne {
	return (&ResourceClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Resource) Unwrap() *Resource {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Resource is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Resource) String() string {
	var builder strings.Builder
	builder.WriteString("Resource(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Resources is a parsable slice of Resource.
type Resources []*Resource

func (r Resources) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
