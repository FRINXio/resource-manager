// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (as *AllocationStrategyQuery) CollectFields(ctx context.Context, satisfies ...string) (*AllocationStrategyQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return as, nil
	}
	if err := as.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return as, nil
}

func (as *AllocationStrategyQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "pools":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ResourcePoolQuery{config: as.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			as.WithNamedPools(alias, func(wq *ResourcePoolQuery) {
				*wq = *query
			})
		case "poolPropertyTypes", "pool_property_types":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &PropertyTypeQuery{config: as.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			as.WithNamedPoolPropertyTypes(alias, func(wq *PropertyTypeQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type allocationstrategyPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AllocationStrategyPaginateOption
}

func newAllocationStrategyPaginateArgs(rv map[string]interface{}) *allocationstrategyPaginateArgs {
	args := &allocationstrategyPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pp *PoolPropertiesQuery) CollectFields(ctx context.Context, satisfies ...string) (*PoolPropertiesQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pp, nil
	}
	if err := pp.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pp, nil
}

func (pp *PoolPropertiesQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "pool":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ResourcePoolQuery{config: pp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			pp.withPool = query
		case "resourcetype", "resourceType":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ResourceTypeQuery{config: pp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			pp.WithNamedResourceType(alias, func(wq *ResourceTypeQuery) {
				*wq = *query
			})
		case "properties":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &PropertyQuery{config: pp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			pp.WithNamedProperties(alias, func(wq *PropertyQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type poolpropertiesPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PoolPropertiesPaginateOption
}

func newPoolPropertiesPaginateArgs(rv map[string]interface{}) *poolpropertiesPaginateArgs {
	args := &poolpropertiesPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *PropertyQuery) CollectFields(ctx context.Context, satisfies ...string) (*PropertyQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pr, nil
	}
	if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pr, nil
}

func (pr *PropertyQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "type":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &PropertyTypeQuery{config: pr.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			pr.withType = query
		case "resources":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ResourceQuery{config: pr.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			pr.withResources = query
		}
	}
	return nil
}

type propertyPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PropertyPaginateOption
}

func newPropertyPaginateArgs(rv map[string]interface{}) *propertyPaginateArgs {
	args := &propertyPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pt *PropertyTypeQuery) CollectFields(ctx context.Context, satisfies ...string) (*PropertyTypeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pt, nil
	}
	if err := pt.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pt, nil
}

func (pt *PropertyTypeQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "properties":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &PropertyQuery{config: pt.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			pt.WithNamedProperties(alias, func(wq *PropertyQuery) {
				*wq = *query
			})
		case "resourceType", "resource_type":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ResourceTypeQuery{config: pt.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			pt.withResourceType = query
		}
	}
	return nil
}

type propertytypePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PropertyTypePaginateOption
}

func newPropertyTypePaginateArgs(rv map[string]interface{}) *propertytypePaginateArgs {
	args := &propertytypePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *ResourceQuery) CollectFields(ctx context.Context, satisfies ...string) (*ResourceQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return r, nil
	}
	if err := r.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return r, nil
}

func (r *ResourceQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "pool":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ResourcePoolQuery{config: r.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			r.withPool = query
		case "properties":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &PropertyQuery{config: r.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			r.WithNamedProperties(alias, func(wq *PropertyQuery) {
				*wq = *query
			})
		case "nestedPool", "nested_pool":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ResourcePoolQuery{config: r.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			r.withNestedPool = query
		}
	}
	return nil
}

type resourcePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ResourcePaginateOption
}

func newResourcePaginateArgs(rv map[string]interface{}) *resourcePaginateArgs {
	args := &resourcePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (rp *ResourcePoolQuery) CollectFields(ctx context.Context, satisfies ...string) (*ResourcePoolQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return rp, nil
	}
	if err := rp.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return rp, nil
}

func (rp *ResourcePoolQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "resourceType", "resource_type":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ResourceTypeQuery{config: rp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			rp.withResourceType = query
		case "tags":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &TagQuery{config: rp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			rp.WithNamedTags(alias, func(wq *TagQuery) {
				*wq = *query
			})
		case "claims":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ResourceQuery{config: rp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			rp.WithNamedClaims(alias, func(wq *ResourceQuery) {
				*wq = *query
			})
		case "poolproperties", "poolProperties":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &PoolPropertiesQuery{config: rp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			rp.withPoolProperties = query
		case "allocationStrategy", "allocation_strategy":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &AllocationStrategyQuery{config: rp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			rp.withAllocationStrategy = query
		case "parentResource", "parent_resource":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ResourceQuery{config: rp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			rp.withParentResource = query
		}
	}
	return nil
}

type resourcepoolPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ResourcePoolPaginateOption
}

func newResourcePoolPaginateArgs(rv map[string]interface{}) *resourcepoolPaginateArgs {
	args := &resourcepoolPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &ResourcePoolOrder{Field: &ResourcePoolOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithResourcePoolOrder(order))
			}
		case *ResourcePoolOrder:
			if v != nil {
				args.opts = append(args.opts, WithResourcePoolOrder(v))
			}
		}
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (rt *ResourceTypeQuery) CollectFields(ctx context.Context, satisfies ...string) (*ResourceTypeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return rt, nil
	}
	if err := rt.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return rt, nil
}

func (rt *ResourceTypeQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "propertyTypes", "property_types":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &PropertyTypeQuery{config: rt.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			rt.WithNamedPropertyTypes(alias, func(wq *PropertyTypeQuery) {
				*wq = *query
			})
		case "pools":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ResourcePoolQuery{config: rt.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			rt.WithNamedPools(alias, func(wq *ResourcePoolQuery) {
				*wq = *query
			})
		case "poolProperties", "pool_properties":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &PoolPropertiesQuery{config: rt.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			rt.WithNamedPoolProperties(alias, func(wq *PoolPropertiesQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type resourcetypePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ResourceTypePaginateOption
}

func newResourceTypePaginateArgs(rv map[string]interface{}) *resourcetypePaginateArgs {
	args := &resourcetypePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TagQuery) CollectFields(ctx context.Context, satisfies ...string) (*TagQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if err := t.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return t, nil
}

func (t *TagQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "pools":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ResourcePoolQuery{config: t.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			t.WithNamedPools(alias, func(wq *ResourcePoolQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type tagPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TagPaginateOption
}

func newTagPaginateArgs(rv map[string]interface{}) *tagPaginateArgs {
	args := &tagPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Alias == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}
