// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/net-auto/resourceManager/ent/allocationstrategy"
)

// AllocationStrategy is the model entity for the AllocationStrategy schema.
type AllocationStrategy struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Lang holds the value of the "lang" field.
	Lang allocationstrategy.Lang `json:"lang,omitempty"`
	// Script holds the value of the "script" field.
	Script string `json:"script,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AllocationStrategyQuery when eager-loading is set.
	Edges AllocationStrategyEdges `json:"edges"`
}

// AllocationStrategyEdges holds the relations/edges for other nodes in the graph.
type AllocationStrategyEdges struct {
	// Pools holds the value of the pools edge.
	Pools []*ResourcePool
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PoolsOrErr returns the Pools value or an error if the edge
// was not loaded in eager-loading.
func (e AllocationStrategyEdges) PoolsOrErr() ([]*ResourcePool, error) {
	if e.loadedTypes[0] {
		return e.Pools, nil
	}
	return nil, &NotLoadedError{edge: "pools"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AllocationStrategy) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // lang
		&sql.NullString{}, // script
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AllocationStrategy fields.
func (as *AllocationStrategy) assignValues(values ...interface{}) error {
	if m, n := len(values), len(allocationstrategy.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	as.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		as.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field lang", values[1])
	} else if value.Valid {
		as.Lang = allocationstrategy.Lang(value.String)
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field script", values[2])
	} else if value.Valid {
		as.Script = value.String
	}
	return nil
}

// QueryPools queries the pools edge of the AllocationStrategy.
func (as *AllocationStrategy) QueryPools() *ResourcePoolQuery {
	return (&AllocationStrategyClient{config: as.config}).QueryPools(as)
}

// Update returns a builder for updating this AllocationStrategy.
// Note that, you need to call AllocationStrategy.Unwrap() before calling this method, if this AllocationStrategy
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AllocationStrategy) Update() *AllocationStrategyUpdateOne {
	return (&AllocationStrategyClient{config: as.config}).UpdateOne(as)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (as *AllocationStrategy) Unwrap() *AllocationStrategy {
	tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AllocationStrategy is not a transactional entity")
	}
	as.config.driver = tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AllocationStrategy) String() string {
	var builder strings.Builder
	builder.WriteString("AllocationStrategy(")
	builder.WriteString(fmt.Sprintf("id=%v", as.ID))
	builder.WriteString(", name=")
	builder.WriteString(as.Name)
	builder.WriteString(", lang=")
	builder.WriteString(fmt.Sprintf("%v", as.Lang))
	builder.WriteString(", script=")
	builder.WriteString(as.Script)
	builder.WriteByte(')')
	return builder.String()
}

// AllocationStrategies is a parsable slice of AllocationStrategy.
type AllocationStrategies []*AllocationStrategy

func (as AllocationStrategies) config(cfg config) {
	for _i := range as {
		as[_i].config = cfg
	}
}
