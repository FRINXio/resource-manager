// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/net-auto/resourceManager/ent/allocationstrategy"
)

// AllocationStrategy is the model entity for the AllocationStrategy schema.
type AllocationStrategy struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Lang holds the value of the "lang" field.
	Lang allocationstrategy.Lang `json:"lang,omitempty"`
	// Script holds the value of the "script" field.
	Script string `json:"script,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AllocationStrategyQuery when eager-loading is set.
	Edges AllocationStrategyEdges `json:"edges"`
}

// AllocationStrategyEdges holds the relations/edges for other nodes in the graph.
type AllocationStrategyEdges struct {
	// Pools holds the value of the pools edge.
	Pools []*ResourcePool `json:"pools,omitempty"`
	// PoolPropertyTypes holds the value of the pool_property_types edge.
	PoolPropertyTypes []*PropertyType `json:"pool_property_types,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedPools             map[string][]*ResourcePool
	namedPoolPropertyTypes map[string][]*PropertyType
}

// PoolsOrErr returns the Pools value or an error if the edge
// was not loaded in eager-loading.
func (e AllocationStrategyEdges) PoolsOrErr() ([]*ResourcePool, error) {
	if e.loadedTypes[0] {
		return e.Pools, nil
	}
	return nil, &NotLoadedError{edge: "pools"}
}

// PoolPropertyTypesOrErr returns the PoolPropertyTypes value or an error if the edge
// was not loaded in eager-loading.
func (e AllocationStrategyEdges) PoolPropertyTypesOrErr() ([]*PropertyType, error) {
	if e.loadedTypes[1] {
		return e.PoolPropertyTypes, nil
	}
	return nil, &NotLoadedError{edge: "pool_property_types"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AllocationStrategy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case allocationstrategy.FieldID:
			values[i] = new(sql.NullInt64)
		case allocationstrategy.FieldName, allocationstrategy.FieldDescription, allocationstrategy.FieldLang, allocationstrategy.FieldScript:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AllocationStrategy", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AllocationStrategy fields.
func (as *AllocationStrategy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case allocationstrategy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			as.ID = int(value.Int64)
		case allocationstrategy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				as.Name = value.String
			}
		case allocationstrategy.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				as.Description = new(string)
				*as.Description = value.String
			}
		case allocationstrategy.FieldLang:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lang", values[i])
			} else if value.Valid {
				as.Lang = allocationstrategy.Lang(value.String)
			}
		case allocationstrategy.FieldScript:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script", values[i])
			} else if value.Valid {
				as.Script = value.String
			}
		}
	}
	return nil
}

// QueryPools queries the "pools" edge of the AllocationStrategy entity.
func (as *AllocationStrategy) QueryPools() *ResourcePoolQuery {
	return (&AllocationStrategyClient{config: as.config}).QueryPools(as)
}

// QueryPoolPropertyTypes queries the "pool_property_types" edge of the AllocationStrategy entity.
func (as *AllocationStrategy) QueryPoolPropertyTypes() *PropertyTypeQuery {
	return (&AllocationStrategyClient{config: as.config}).QueryPoolPropertyTypes(as)
}

// Update returns a builder for updating this AllocationStrategy.
// Note that you need to call AllocationStrategy.Unwrap() before calling this method if this AllocationStrategy
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AllocationStrategy) Update() *AllocationStrategyUpdateOne {
	return (&AllocationStrategyClient{config: as.config}).UpdateOne(as)
}

// Unwrap unwraps the AllocationStrategy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AllocationStrategy) Unwrap() *AllocationStrategy {
	_tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AllocationStrategy is not a transactional entity")
	}
	as.config.driver = _tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AllocationStrategy) String() string {
	var builder strings.Builder
	builder.WriteString("AllocationStrategy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", as.ID))
	builder.WriteString("name=")
	builder.WriteString(as.Name)
	builder.WriteString(", ")
	if v := as.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("lang=")
	builder.WriteString(fmt.Sprintf("%v", as.Lang))
	builder.WriteString(", ")
	builder.WriteString("script=")
	builder.WriteString(as.Script)
	builder.WriteByte(')')
	return builder.String()
}

// NamedPools returns the Pools named value or an error if the edge was not
// loaded in eager-loading with this name.
func (as *AllocationStrategy) NamedPools(name string) ([]*ResourcePool, error) {
	if as.Edges.namedPools == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := as.Edges.namedPools[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (as *AllocationStrategy) appendNamedPools(name string, edges ...*ResourcePool) {
	if as.Edges.namedPools == nil {
		as.Edges.namedPools = make(map[string][]*ResourcePool)
	}
	if len(edges) == 0 {
		as.Edges.namedPools[name] = []*ResourcePool{}
	} else {
		as.Edges.namedPools[name] = append(as.Edges.namedPools[name], edges...)
	}
}

// NamedPoolPropertyTypes returns the PoolPropertyTypes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (as *AllocationStrategy) NamedPoolPropertyTypes(name string) ([]*PropertyType, error) {
	if as.Edges.namedPoolPropertyTypes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := as.Edges.namedPoolPropertyTypes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (as *AllocationStrategy) appendNamedPoolPropertyTypes(name string, edges ...*PropertyType) {
	if as.Edges.namedPoolPropertyTypes == nil {
		as.Edges.namedPoolPropertyTypes = make(map[string][]*PropertyType)
	}
	if len(edges) == 0 {
		as.Edges.namedPoolPropertyTypes[name] = []*PropertyType{}
	} else {
		as.Edges.namedPoolPropertyTypes[name] = append(as.Edges.namedPoolPropertyTypes[name], edges...)
	}
}

// AllocationStrategies is a parsable slice of AllocationStrategy.
type AllocationStrategies []*AllocationStrategy

func (as AllocationStrategies) config(cfg config) {
	for _i := range as {
		as[_i].config = cfg
	}
}
