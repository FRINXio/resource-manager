// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/net-auto/resourceManager/ent/poolproperties"
	"github.com/net-auto/resourceManager/ent/predicate"
	"github.com/net-auto/resourceManager/ent/property"
	"github.com/net-auto/resourceManager/ent/resourcepool"
	"github.com/net-auto/resourceManager/ent/resourcetype"
)

// PoolPropertiesQuery is the builder for querying PoolProperties entities.
type PoolPropertiesQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.PoolProperties
	// eager-loading edges.
	withPool         *ResourcePoolQuery
	withResourceType *ResourceTypeQuery
	withProperties   *PropertyQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (ppq *PoolPropertiesQuery) Where(ps ...predicate.PoolProperties) *PoolPropertiesQuery {
	ppq.predicates = append(ppq.predicates, ps...)
	return ppq
}

// Limit adds a limit step to the query.
func (ppq *PoolPropertiesQuery) Limit(limit int) *PoolPropertiesQuery {
	ppq.limit = &limit
	return ppq
}

// Offset adds an offset step to the query.
func (ppq *PoolPropertiesQuery) Offset(offset int) *PoolPropertiesQuery {
	ppq.offset = &offset
	return ppq
}

// Order adds an order step to the query.
func (ppq *PoolPropertiesQuery) Order(o ...OrderFunc) *PoolPropertiesQuery {
	ppq.order = append(ppq.order, o...)
	return ppq
}

// QueryPool chains the current query on the pool edge.
func (ppq *PoolPropertiesQuery) QueryPool() *ResourcePoolQuery {
	query := &ResourcePoolQuery{config: ppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(poolproperties.Table, poolproperties.FieldID, selector),
			sqlgraph.To(resourcepool.Table, resourcepool.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, poolproperties.PoolTable, poolproperties.PoolColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResourceType chains the current query on the resourceType edge.
func (ppq *PoolPropertiesQuery) QueryResourceType() *ResourceTypeQuery {
	query := &ResourceTypeQuery{config: ppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(poolproperties.Table, poolproperties.FieldID, selector),
			sqlgraph.To(resourcetype.Table, resourcetype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, poolproperties.ResourceTypeTable, poolproperties.ResourceTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProperties chains the current query on the properties edge.
func (ppq *PoolPropertiesQuery) QueryProperties() *PropertyQuery {
	query := &PropertyQuery{config: ppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(poolproperties.Table, poolproperties.FieldID, selector),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, poolproperties.PropertiesTable, poolproperties.PropertiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PoolProperties entity in the query. Returns *NotFoundError when no poolproperties was found.
func (ppq *PoolPropertiesQuery) First(ctx context.Context) (*PoolProperties, error) {
	nodes, err := ppq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{poolproperties.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) FirstX(ctx context.Context) *PoolProperties {
	node, err := ppq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PoolProperties id in the query. Returns *NotFoundError when no id was found.
func (ppq *PoolPropertiesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ppq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{poolproperties.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) FirstIDX(ctx context.Context) int {
	id, err := ppq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only PoolProperties entity in the query, returns an error if not exactly one entity was returned.
func (ppq *PoolPropertiesQuery) Only(ctx context.Context) (*PoolProperties, error) {
	nodes, err := ppq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{poolproperties.Label}
	default:
		return nil, &NotSingularError{poolproperties.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) OnlyX(ctx context.Context) *PoolProperties {
	node, err := ppq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only PoolProperties id in the query, returns an error if not exactly one id was returned.
func (ppq *PoolPropertiesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ppq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{poolproperties.Label}
	default:
		err = &NotSingularError{poolproperties.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) OnlyIDX(ctx context.Context) int {
	id, err := ppq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PoolPropertiesSlice.
func (ppq *PoolPropertiesQuery) All(ctx context.Context) ([]*PoolProperties, error) {
	if err := ppq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ppq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) AllX(ctx context.Context) []*PoolProperties {
	nodes, err := ppq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PoolProperties ids.
func (ppq *PoolPropertiesQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ppq.Select(poolproperties.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) IDsX(ctx context.Context) []int {
	ids, err := ppq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ppq *PoolPropertiesQuery) Count(ctx context.Context) (int, error) {
	if err := ppq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ppq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) CountX(ctx context.Context) int {
	count, err := ppq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ppq *PoolPropertiesQuery) Exist(ctx context.Context) (bool, error) {
	if err := ppq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ppq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) ExistX(ctx context.Context) bool {
	exist, err := ppq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ppq *PoolPropertiesQuery) Clone() *PoolPropertiesQuery {
	return &PoolPropertiesQuery{
		config:     ppq.config,
		limit:      ppq.limit,
		offset:     ppq.offset,
		order:      append([]OrderFunc{}, ppq.order...),
		unique:     append([]string{}, ppq.unique...),
		predicates: append([]predicate.PoolProperties{}, ppq.predicates...),
		// clone intermediate query.
		sql:  ppq.sql.Clone(),
		path: ppq.path,
	}
}

//  WithPool tells the query-builder to eager-loads the nodes that are connected to
// the "pool" edge. The optional arguments used to configure the query builder of the edge.
func (ppq *PoolPropertiesQuery) WithPool(opts ...func(*ResourcePoolQuery)) *PoolPropertiesQuery {
	query := &ResourcePoolQuery{config: ppq.config}
	for _, opt := range opts {
		opt(query)
	}
	ppq.withPool = query
	return ppq
}

//  WithResourceType tells the query-builder to eager-loads the nodes that are connected to
// the "resourceType" edge. The optional arguments used to configure the query builder of the edge.
func (ppq *PoolPropertiesQuery) WithResourceType(opts ...func(*ResourceTypeQuery)) *PoolPropertiesQuery {
	query := &ResourceTypeQuery{config: ppq.config}
	for _, opt := range opts {
		opt(query)
	}
	ppq.withResourceType = query
	return ppq
}

//  WithProperties tells the query-builder to eager-loads the nodes that are connected to
// the "properties" edge. The optional arguments used to configure the query builder of the edge.
func (ppq *PoolPropertiesQuery) WithProperties(opts ...func(*PropertyQuery)) *PoolPropertiesQuery {
	query := &PropertyQuery{config: ppq.config}
	for _, opt := range opts {
		opt(query)
	}
	ppq.withProperties = query
	return ppq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (ppq *PoolPropertiesQuery) GroupBy(field string, fields ...string) *PoolPropertiesGroupBy {
	group := &PoolPropertiesGroupBy{config: ppq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ppq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
func (ppq *PoolPropertiesQuery) Select(field string, fields ...string) *PoolPropertiesSelect {
	selector := &PoolPropertiesSelect{config: ppq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ppq.sqlQuery(), nil
	}
	return selector
}

func (ppq *PoolPropertiesQuery) prepareQuery(ctx context.Context) error {
	if ppq.path != nil {
		prev, err := ppq.path(ctx)
		if err != nil {
			return err
		}
		ppq.sql = prev
	}
	if err := poolproperties.Policy.EvalQuery(ctx, ppq); err != nil {
		return err
	}
	return nil
}

func (ppq *PoolPropertiesQuery) sqlAll(ctx context.Context) ([]*PoolProperties, error) {
	var (
		nodes       = []*PoolProperties{}
		withFKs     = ppq.withFKs
		_spec       = ppq.querySpec()
		loadedTypes = [3]bool{
			ppq.withPool != nil,
			ppq.withResourceType != nil,
			ppq.withProperties != nil,
		}
	)
	if ppq.withPool != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, poolproperties.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &PoolProperties{config: ppq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, ppq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ppq.withPool; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*PoolProperties)
		for i := range nodes {
			if fk := nodes[i].resource_pool_pool_properties; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(resourcepool.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "resource_pool_pool_properties" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Pool = n
			}
		}
	}

	if query := ppq.withResourceType; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*PoolProperties)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ResourceType = []*ResourceType{}
		}
		query.withFKs = true
		query.Where(predicate.ResourceType(func(s *sql.Selector) {
			s.Where(sql.InValues(poolproperties.ResourceTypeColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.pool_properties_resource_type
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "pool_properties_resource_type" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "pool_properties_resource_type" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ResourceType = append(node.Edges.ResourceType, n)
		}
	}

	if query := ppq.withProperties; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*PoolProperties)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Properties = []*Property{}
		}
		query.withFKs = true
		query.Where(predicate.Property(func(s *sql.Selector) {
			s.Where(sql.InValues(poolproperties.PropertiesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.pool_properties_properties
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "pool_properties_properties" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "pool_properties_properties" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Properties = append(node.Edges.Properties, n)
		}
	}

	return nodes, nil
}

func (ppq *PoolPropertiesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ppq.querySpec()
	return sqlgraph.CountNodes(ctx, ppq.driver, _spec)
}

func (ppq *PoolPropertiesQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ppq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (ppq *PoolPropertiesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   poolproperties.Table,
			Columns: poolproperties.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: poolproperties.FieldID,
			},
		},
		From:   ppq.sql,
		Unique: true,
	}
	if ps := ppq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ppq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ppq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ppq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, poolproperties.ValidColumn)
			}
		}
	}
	return _spec
}

func (ppq *PoolPropertiesQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(ppq.driver.Dialect())
	t1 := builder.Table(poolproperties.Table)
	selector := builder.Select(t1.Columns(poolproperties.Columns...)...).From(t1)
	if ppq.sql != nil {
		selector = ppq.sql
		selector.Select(selector.Columns(poolproperties.Columns...)...)
	}
	for _, p := range ppq.predicates {
		p(selector)
	}
	for _, p := range ppq.order {
		p(selector, poolproperties.ValidColumn)
	}
	if offset := ppq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ppq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PoolPropertiesGroupBy is the builder for group-by PoolProperties entities.
type PoolPropertiesGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ppgb *PoolPropertiesGroupBy) Aggregate(fns ...AggregateFunc) *PoolPropertiesGroupBy {
	ppgb.fns = append(ppgb.fns, fns...)
	return ppgb
}

// Scan applies the group-by query and scan the result into the given value.
func (ppgb *PoolPropertiesGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ppgb.path(ctx)
	if err != nil {
		return err
	}
	ppgb.sql = query
	return ppgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ppgb *PoolPropertiesGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ppgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (ppgb *PoolPropertiesGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ppgb.fields) > 1 {
		return nil, errors.New("ent: PoolPropertiesGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ppgb *PoolPropertiesGroupBy) StringsX(ctx context.Context) []string {
	v, err := ppgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (ppgb *PoolPropertiesGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ppgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{poolproperties.Label}
	default:
		err = fmt.Errorf("ent: PoolPropertiesGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ppgb *PoolPropertiesGroupBy) StringX(ctx context.Context) string {
	v, err := ppgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (ppgb *PoolPropertiesGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ppgb.fields) > 1 {
		return nil, errors.New("ent: PoolPropertiesGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ppgb *PoolPropertiesGroupBy) IntsX(ctx context.Context) []int {
	v, err := ppgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (ppgb *PoolPropertiesGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ppgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{poolproperties.Label}
	default:
		err = fmt.Errorf("ent: PoolPropertiesGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ppgb *PoolPropertiesGroupBy) IntX(ctx context.Context) int {
	v, err := ppgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (ppgb *PoolPropertiesGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ppgb.fields) > 1 {
		return nil, errors.New("ent: PoolPropertiesGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ppgb *PoolPropertiesGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ppgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (ppgb *PoolPropertiesGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ppgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{poolproperties.Label}
	default:
		err = fmt.Errorf("ent: PoolPropertiesGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ppgb *PoolPropertiesGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ppgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (ppgb *PoolPropertiesGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ppgb.fields) > 1 {
		return nil, errors.New("ent: PoolPropertiesGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ppgb *PoolPropertiesGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ppgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (ppgb *PoolPropertiesGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ppgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{poolproperties.Label}
	default:
		err = fmt.Errorf("ent: PoolPropertiesGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ppgb *PoolPropertiesGroupBy) BoolX(ctx context.Context) bool {
	v, err := ppgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ppgb *PoolPropertiesGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ppgb.fields {
		if !poolproperties.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ppgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ppgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ppgb *PoolPropertiesGroupBy) sqlQuery() *sql.Selector {
	selector := ppgb.sql
	columns := make([]string, 0, len(ppgb.fields)+len(ppgb.fns))
	columns = append(columns, ppgb.fields...)
	for _, fn := range ppgb.fns {
		columns = append(columns, fn(selector, poolproperties.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(ppgb.fields...)
}

// PoolPropertiesSelect is the builder for select fields of PoolProperties entities.
type PoolPropertiesSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (pps *PoolPropertiesSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := pps.path(ctx)
	if err != nil {
		return err
	}
	pps.sql = query
	return pps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pps *PoolPropertiesSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (pps *PoolPropertiesSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pps.fields) > 1 {
		return nil, errors.New("ent: PoolPropertiesSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pps *PoolPropertiesSelect) StringsX(ctx context.Context) []string {
	v, err := pps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (pps *PoolPropertiesSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{poolproperties.Label}
	default:
		err = fmt.Errorf("ent: PoolPropertiesSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pps *PoolPropertiesSelect) StringX(ctx context.Context) string {
	v, err := pps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (pps *PoolPropertiesSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pps.fields) > 1 {
		return nil, errors.New("ent: PoolPropertiesSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pps *PoolPropertiesSelect) IntsX(ctx context.Context) []int {
	v, err := pps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (pps *PoolPropertiesSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{poolproperties.Label}
	default:
		err = fmt.Errorf("ent: PoolPropertiesSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pps *PoolPropertiesSelect) IntX(ctx context.Context) int {
	v, err := pps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (pps *PoolPropertiesSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pps.fields) > 1 {
		return nil, errors.New("ent: PoolPropertiesSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pps *PoolPropertiesSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (pps *PoolPropertiesSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{poolproperties.Label}
	default:
		err = fmt.Errorf("ent: PoolPropertiesSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pps *PoolPropertiesSelect) Float64X(ctx context.Context) float64 {
	v, err := pps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (pps *PoolPropertiesSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pps.fields) > 1 {
		return nil, errors.New("ent: PoolPropertiesSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pps *PoolPropertiesSelect) BoolsX(ctx context.Context) []bool {
	v, err := pps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (pps *PoolPropertiesSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{poolproperties.Label}
	default:
		err = fmt.Errorf("ent: PoolPropertiesSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pps *PoolPropertiesSelect) BoolX(ctx context.Context) bool {
	v, err := pps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pps *PoolPropertiesSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pps.fields {
		if !poolproperties.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := pps.sqlQuery().Query()
	if err := pps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pps *PoolPropertiesSelect) sqlQuery() sql.Querier {
	selector := pps.sql
	selector.Select(selector.Columns(pps.fields...)...)
	return selector
}
