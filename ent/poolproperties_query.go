// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/net-auto/resourceManager/ent/poolproperties"
	"github.com/net-auto/resourceManager/ent/predicate"
	"github.com/net-auto/resourceManager/ent/property"
	"github.com/net-auto/resourceManager/ent/resourcepool"
	"github.com/net-auto/resourceManager/ent/resourcetype"
)

// PoolPropertiesQuery is the builder for querying PoolProperties entities.
type PoolPropertiesQuery struct {
	config
	limit                 *int
	offset                *int
	unique                *bool
	order                 []OrderFunc
	fields                []string
	predicates            []predicate.PoolProperties
	withPool              *ResourcePoolQuery
	withResourceType      *ResourceTypeQuery
	withProperties        *PropertyQuery
	withFKs               bool
	modifiers             []func(*sql.Selector)
	loadTotal             []func(context.Context, []*PoolProperties) error
	withNamedResourceType map[string]*ResourceTypeQuery
	withNamedProperties   map[string]*PropertyQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PoolPropertiesQuery builder.
func (ppq *PoolPropertiesQuery) Where(ps ...predicate.PoolProperties) *PoolPropertiesQuery {
	ppq.predicates = append(ppq.predicates, ps...)
	return ppq
}

// Limit adds a limit step to the query.
func (ppq *PoolPropertiesQuery) Limit(limit int) *PoolPropertiesQuery {
	ppq.limit = &limit
	return ppq
}

// Offset adds an offset step to the query.
func (ppq *PoolPropertiesQuery) Offset(offset int) *PoolPropertiesQuery {
	ppq.offset = &offset
	return ppq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ppq *PoolPropertiesQuery) Unique(unique bool) *PoolPropertiesQuery {
	ppq.unique = &unique
	return ppq
}

// Order adds an order step to the query.
func (ppq *PoolPropertiesQuery) Order(o ...OrderFunc) *PoolPropertiesQuery {
	ppq.order = append(ppq.order, o...)
	return ppq
}

// QueryPool chains the current query on the "pool" edge.
func (ppq *PoolPropertiesQuery) QueryPool() *ResourcePoolQuery {
	query := &ResourcePoolQuery{config: ppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(poolproperties.Table, poolproperties.FieldID, selector),
			sqlgraph.To(resourcepool.Table, resourcepool.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, poolproperties.PoolTable, poolproperties.PoolColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResourceType chains the current query on the "resourceType" edge.
func (ppq *PoolPropertiesQuery) QueryResourceType() *ResourceTypeQuery {
	query := &ResourceTypeQuery{config: ppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(poolproperties.Table, poolproperties.FieldID, selector),
			sqlgraph.To(resourcetype.Table, resourcetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, poolproperties.ResourceTypeTable, poolproperties.ResourceTypePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProperties chains the current query on the "properties" edge.
func (ppq *PoolPropertiesQuery) QueryProperties() *PropertyQuery {
	query := &PropertyQuery{config: ppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(poolproperties.Table, poolproperties.FieldID, selector),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, poolproperties.PropertiesTable, poolproperties.PropertiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PoolProperties entity from the query.
// Returns a *NotFoundError when no PoolProperties was found.
func (ppq *PoolPropertiesQuery) First(ctx context.Context) (*PoolProperties, error) {
	nodes, err := ppq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{poolproperties.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) FirstX(ctx context.Context) *PoolProperties {
	node, err := ppq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PoolProperties ID from the query.
// Returns a *NotFoundError when no PoolProperties ID was found.
func (ppq *PoolPropertiesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ppq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{poolproperties.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) FirstIDX(ctx context.Context) int {
	id, err := ppq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PoolProperties entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PoolProperties entity is found.
// Returns a *NotFoundError when no PoolProperties entities are found.
func (ppq *PoolPropertiesQuery) Only(ctx context.Context) (*PoolProperties, error) {
	nodes, err := ppq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{poolproperties.Label}
	default:
		return nil, &NotSingularError{poolproperties.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) OnlyX(ctx context.Context) *PoolProperties {
	node, err := ppq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PoolProperties ID in the query.
// Returns a *NotSingularError when more than one PoolProperties ID is found.
// Returns a *NotFoundError when no entities are found.
func (ppq *PoolPropertiesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ppq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{poolproperties.Label}
	default:
		err = &NotSingularError{poolproperties.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) OnlyIDX(ctx context.Context) int {
	id, err := ppq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PoolPropertiesSlice.
func (ppq *PoolPropertiesQuery) All(ctx context.Context) ([]*PoolProperties, error) {
	if err := ppq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ppq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) AllX(ctx context.Context) []*PoolProperties {
	nodes, err := ppq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PoolProperties IDs.
func (ppq *PoolPropertiesQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ppq.Select(poolproperties.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) IDsX(ctx context.Context) []int {
	ids, err := ppq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ppq *PoolPropertiesQuery) Count(ctx context.Context) (int, error) {
	if err := ppq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ppq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) CountX(ctx context.Context) int {
	count, err := ppq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ppq *PoolPropertiesQuery) Exist(ctx context.Context) (bool, error) {
	if err := ppq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ppq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ppq *PoolPropertiesQuery) ExistX(ctx context.Context) bool {
	exist, err := ppq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PoolPropertiesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ppq *PoolPropertiesQuery) Clone() *PoolPropertiesQuery {
	if ppq == nil {
		return nil
	}
	return &PoolPropertiesQuery{
		config:           ppq.config,
		limit:            ppq.limit,
		offset:           ppq.offset,
		order:            append([]OrderFunc{}, ppq.order...),
		predicates:       append([]predicate.PoolProperties{}, ppq.predicates...),
		withPool:         ppq.withPool.Clone(),
		withResourceType: ppq.withResourceType.Clone(),
		withProperties:   ppq.withProperties.Clone(),
		// clone intermediate query.
		sql:    ppq.sql.Clone(),
		path:   ppq.path,
		unique: ppq.unique,
	}
}

// WithPool tells the query-builder to eager-load the nodes that are connected to
// the "pool" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *PoolPropertiesQuery) WithPool(opts ...func(*ResourcePoolQuery)) *PoolPropertiesQuery {
	query := &ResourcePoolQuery{config: ppq.config}
	for _, opt := range opts {
		opt(query)
	}
	ppq.withPool = query
	return ppq
}

// WithResourceType tells the query-builder to eager-load the nodes that are connected to
// the "resourceType" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *PoolPropertiesQuery) WithResourceType(opts ...func(*ResourceTypeQuery)) *PoolPropertiesQuery {
	query := &ResourceTypeQuery{config: ppq.config}
	for _, opt := range opts {
		opt(query)
	}
	ppq.withResourceType = query
	return ppq
}

// WithProperties tells the query-builder to eager-load the nodes that are connected to
// the "properties" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *PoolPropertiesQuery) WithProperties(opts ...func(*PropertyQuery)) *PoolPropertiesQuery {
	query := &PropertyQuery{config: ppq.config}
	for _, opt := range opts {
		opt(query)
	}
	ppq.withProperties = query
	return ppq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (ppq *PoolPropertiesQuery) GroupBy(field string, fields ...string) *PoolPropertiesGroupBy {
	grbuild := &PoolPropertiesGroupBy{config: ppq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ppq.sqlQuery(ctx), nil
	}
	grbuild.label = poolproperties.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (ppq *PoolPropertiesQuery) Select(fields ...string) *PoolPropertiesSelect {
	ppq.fields = append(ppq.fields, fields...)
	selbuild := &PoolPropertiesSelect{PoolPropertiesQuery: ppq}
	selbuild.label = poolproperties.Label
	selbuild.flds, selbuild.scan = &ppq.fields, selbuild.Scan
	return selbuild
}

func (ppq *PoolPropertiesQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ppq.fields {
		if !poolproperties.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ppq.path != nil {
		prev, err := ppq.path(ctx)
		if err != nil {
			return err
		}
		ppq.sql = prev
	}
	if poolproperties.Policy == nil {
		return errors.New("ent: uninitialized poolproperties.Policy (forgotten import ent/runtime?)")
	}
	if err := poolproperties.Policy.EvalQuery(ctx, ppq); err != nil {
		return err
	}
	return nil
}

func (ppq *PoolPropertiesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PoolProperties, error) {
	var (
		nodes       = []*PoolProperties{}
		withFKs     = ppq.withFKs
		_spec       = ppq.querySpec()
		loadedTypes = [3]bool{
			ppq.withPool != nil,
			ppq.withResourceType != nil,
			ppq.withProperties != nil,
		}
	)
	if ppq.withPool != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, poolproperties.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PoolProperties).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PoolProperties{config: ppq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ppq.modifiers) > 0 {
		_spec.Modifiers = ppq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ppq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ppq.withPool; query != nil {
		if err := ppq.loadPool(ctx, query, nodes, nil,
			func(n *PoolProperties, e *ResourcePool) { n.Edges.Pool = e }); err != nil {
			return nil, err
		}
	}
	if query := ppq.withResourceType; query != nil {
		if err := ppq.loadResourceType(ctx, query, nodes,
			func(n *PoolProperties) { n.Edges.ResourceType = []*ResourceType{} },
			func(n *PoolProperties, e *ResourceType) { n.Edges.ResourceType = append(n.Edges.ResourceType, e) }); err != nil {
			return nil, err
		}
	}
	if query := ppq.withProperties; query != nil {
		if err := ppq.loadProperties(ctx, query, nodes,
			func(n *PoolProperties) { n.Edges.Properties = []*Property{} },
			func(n *PoolProperties, e *Property) { n.Edges.Properties = append(n.Edges.Properties, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ppq.withNamedResourceType {
		if err := ppq.loadResourceType(ctx, query, nodes,
			func(n *PoolProperties) { n.appendNamedResourceType(name) },
			func(n *PoolProperties, e *ResourceType) { n.appendNamedResourceType(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ppq.withNamedProperties {
		if err := ppq.loadProperties(ctx, query, nodes,
			func(n *PoolProperties) { n.appendNamedProperties(name) },
			func(n *PoolProperties, e *Property) { n.appendNamedProperties(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range ppq.loadTotal {
		if err := ppq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ppq *PoolPropertiesQuery) loadPool(ctx context.Context, query *ResourcePoolQuery, nodes []*PoolProperties, init func(*PoolProperties), assign func(*PoolProperties, *ResourcePool)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PoolProperties)
	for i := range nodes {
		if nodes[i].resource_pool_pool_properties == nil {
			continue
		}
		fk := *nodes[i].resource_pool_pool_properties
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(resourcepool.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "resource_pool_pool_properties" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ppq *PoolPropertiesQuery) loadResourceType(ctx context.Context, query *ResourceTypeQuery, nodes []*PoolProperties, init func(*PoolProperties), assign func(*PoolProperties, *ResourceType)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*PoolProperties)
	nids := make(map[int]map[*PoolProperties]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(poolproperties.ResourceTypeTable)
		s.Join(joinT).On(s.C(resourcetype.FieldID), joinT.C(poolproperties.ResourceTypePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(poolproperties.ResourceTypePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(poolproperties.ResourceTypePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*PoolProperties]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "resourceType" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ppq *PoolPropertiesQuery) loadProperties(ctx context.Context, query *PropertyQuery, nodes []*PoolProperties, init func(*PoolProperties), assign func(*PoolProperties, *Property)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PoolProperties)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Property(func(s *sql.Selector) {
		s.Where(sql.InValues(poolproperties.PropertiesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.pool_properties_properties
		if fk == nil {
			return fmt.Errorf(`foreign-key "pool_properties_properties" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "pool_properties_properties" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ppq *PoolPropertiesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ppq.querySpec()
	if len(ppq.modifiers) > 0 {
		_spec.Modifiers = ppq.modifiers
	}
	_spec.Node.Columns = ppq.fields
	if len(ppq.fields) > 0 {
		_spec.Unique = ppq.unique != nil && *ppq.unique
	}
	return sqlgraph.CountNodes(ctx, ppq.driver, _spec)
}

func (ppq *PoolPropertiesQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ppq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ppq *PoolPropertiesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   poolproperties.Table,
			Columns: poolproperties.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: poolproperties.FieldID,
			},
		},
		From:   ppq.sql,
		Unique: true,
	}
	if unique := ppq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ppq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, poolproperties.FieldID)
		for i := range fields {
			if fields[i] != poolproperties.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ppq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ppq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ppq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ppq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ppq *PoolPropertiesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ppq.driver.Dialect())
	t1 := builder.Table(poolproperties.Table)
	columns := ppq.fields
	if len(columns) == 0 {
		columns = poolproperties.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ppq.sql != nil {
		selector = ppq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ppq.unique != nil && *ppq.unique {
		selector.Distinct()
	}
	for _, p := range ppq.predicates {
		p(selector)
	}
	for _, p := range ppq.order {
		p(selector)
	}
	if offset := ppq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ppq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedResourceType tells the query-builder to eager-load the nodes that are connected to the "resourceType"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ppq *PoolPropertiesQuery) WithNamedResourceType(name string, opts ...func(*ResourceTypeQuery)) *PoolPropertiesQuery {
	query := &ResourceTypeQuery{config: ppq.config}
	for _, opt := range opts {
		opt(query)
	}
	if ppq.withNamedResourceType == nil {
		ppq.withNamedResourceType = make(map[string]*ResourceTypeQuery)
	}
	ppq.withNamedResourceType[name] = query
	return ppq
}

// WithNamedProperties tells the query-builder to eager-load the nodes that are connected to the "properties"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ppq *PoolPropertiesQuery) WithNamedProperties(name string, opts ...func(*PropertyQuery)) *PoolPropertiesQuery {
	query := &PropertyQuery{config: ppq.config}
	for _, opt := range opts {
		opt(query)
	}
	if ppq.withNamedProperties == nil {
		ppq.withNamedProperties = make(map[string]*PropertyQuery)
	}
	ppq.withNamedProperties[name] = query
	return ppq
}

// PoolPropertiesGroupBy is the group-by builder for PoolProperties entities.
type PoolPropertiesGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ppgb *PoolPropertiesGroupBy) Aggregate(fns ...AggregateFunc) *PoolPropertiesGroupBy {
	ppgb.fns = append(ppgb.fns, fns...)
	return ppgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ppgb *PoolPropertiesGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ppgb.path(ctx)
	if err != nil {
		return err
	}
	ppgb.sql = query
	return ppgb.sqlScan(ctx, v)
}

func (ppgb *PoolPropertiesGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ppgb.fields {
		if !poolproperties.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ppgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ppgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ppgb *PoolPropertiesGroupBy) sqlQuery() *sql.Selector {
	selector := ppgb.sql.Select()
	aggregation := make([]string, 0, len(ppgb.fns))
	for _, fn := range ppgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ppgb.fields)+len(ppgb.fns))
		for _, f := range ppgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ppgb.fields...)...)
}

// PoolPropertiesSelect is the builder for selecting fields of PoolProperties entities.
type PoolPropertiesSelect struct {
	*PoolPropertiesQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (pps *PoolPropertiesSelect) Scan(ctx context.Context, v any) error {
	if err := pps.prepareQuery(ctx); err != nil {
		return err
	}
	pps.sql = pps.PoolPropertiesQuery.sqlQuery(ctx)
	return pps.sqlScan(ctx, v)
}

func (pps *PoolPropertiesSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := pps.sql.Query()
	if err := pps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
