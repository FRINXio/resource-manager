// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/net-auto/resourceManager/ent/migrate"

	"github.com/net-auto/resourceManager/ent/label"
	"github.com/net-auto/resourceManager/ent/property"
	"github.com/net-auto/resourceManager/ent/propertytype"
	"github.com/net-auto/resourceManager/ent/resource"
	"github.com/net-auto/resourceManager/ent/resourcepool"
	"github.com/net-auto/resourceManager/ent/resourcetype"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Label is the client for interacting with the Label builders.
	Label *LabelClient
	// Property is the client for interacting with the Property builders.
	Property *PropertyClient
	// PropertyType is the client for interacting with the PropertyType builders.
	PropertyType *PropertyTypeClient
	// Resource is the client for interacting with the Resource builders.
	Resource *ResourceClient
	// ResourcePool is the client for interacting with the ResourcePool builders.
	ResourcePool *ResourcePoolClient
	// ResourceType is the client for interacting with the ResourceType builders.
	ResourceType *ResourceTypeClient

	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Label = NewLabelClient(c.config)
	c.Property = NewPropertyClient(c.config)
	c.PropertyType = NewPropertyTypeClient(c.config)
	c.Resource = NewResourceClient(c.config)
	c.ResourcePool = NewResourcePoolClient(c.config)
	c.ResourceType = NewResourceTypeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Label:        NewLabelClient(cfg),
		Property:     NewPropertyClient(cfg),
		PropertyType: NewPropertyTypeClient(cfg),
		Resource:     NewResourceClient(cfg),
		ResourcePool: NewResourcePoolClient(cfg),
		ResourceType: NewResourceTypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:       cfg,
		Label:        NewLabelClient(cfg),
		Property:     NewPropertyClient(cfg),
		PropertyType: NewPropertyTypeClient(cfg),
		Resource:     NewResourceClient(cfg),
		ResourcePool: NewResourcePoolClient(cfg),
		ResourceType: NewResourceTypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Label.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Label.Use(hooks...)
	c.Property.Use(hooks...)
	c.PropertyType.Use(hooks...)
	c.Resource.Use(hooks...)
	c.ResourcePool.Use(hooks...)
	c.ResourceType.Use(hooks...)
}

// LabelClient is a client for the Label schema.
type LabelClient struct {
	config
}

// NewLabelClient returns a client for the Label from the given config.
func NewLabelClient(c config) *LabelClient {
	return &LabelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `label.Hooks(f(g(h())))`.
func (c *LabelClient) Use(hooks ...Hook) {
	c.hooks.Label = append(c.hooks.Label, hooks...)
}

// Create returns a create builder for Label.
func (c *LabelClient) Create() *LabelCreate {
	mutation := newLabelMutation(c.config, OpCreate)
	return &LabelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Label entities.
func (c *LabelClient) CreateBulk(builders ...*LabelCreate) *LabelCreateBulk {
	return &LabelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Label.
func (c *LabelClient) Update() *LabelUpdate {
	mutation := newLabelMutation(c.config, OpUpdate)
	return &LabelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LabelClient) UpdateOne(l *Label) *LabelUpdateOne {
	mutation := newLabelMutation(c.config, OpUpdateOne, withLabel(l))
	return &LabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LabelClient) UpdateOneID(id int) *LabelUpdateOne {
	mutation := newLabelMutation(c.config, OpUpdateOne, withLabelID(id))
	return &LabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Label.
func (c *LabelClient) Delete() *LabelDelete {
	mutation := newLabelMutation(c.config, OpDelete)
	return &LabelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LabelClient) DeleteOne(l *Label) *LabelDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LabelClient) DeleteOneID(id int) *LabelDeleteOne {
	builder := c.Delete().Where(label.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LabelDeleteOne{builder}
}

// Create returns a query builder for Label.
func (c *LabelClient) Query() *LabelQuery {
	return &LabelQuery{config: c.config}
}

// Get returns a Label entity by its id.
func (c *LabelClient) Get(ctx context.Context, id int) (*Label, error) {
	return c.Query().Where(label.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LabelClient) GetX(ctx context.Context, id int) *Label {
	l, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return l
}

// QueryPools queries the pools edge of a Label.
func (c *LabelClient) QueryPools(l *Label) *ResourcePoolQuery {
	query := &ResourcePoolQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(label.Table, label.FieldID, id),
			sqlgraph.To(resourcepool.Table, resourcepool.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, label.PoolsTable, label.PoolsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LabelClient) Hooks() []Hook {
	return c.hooks.Label
}

// PropertyClient is a client for the Property schema.
type PropertyClient struct {
	config
}

// NewPropertyClient returns a client for the Property from the given config.
func NewPropertyClient(c config) *PropertyClient {
	return &PropertyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `property.Hooks(f(g(h())))`.
func (c *PropertyClient) Use(hooks ...Hook) {
	c.hooks.Property = append(c.hooks.Property, hooks...)
}

// Create returns a create builder for Property.
func (c *PropertyClient) Create() *PropertyCreate {
	mutation := newPropertyMutation(c.config, OpCreate)
	return &PropertyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Property entities.
func (c *PropertyClient) CreateBulk(builders ...*PropertyCreate) *PropertyCreateBulk {
	return &PropertyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Property.
func (c *PropertyClient) Update() *PropertyUpdate {
	mutation := newPropertyMutation(c.config, OpUpdate)
	return &PropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PropertyClient) UpdateOne(pr *Property) *PropertyUpdateOne {
	mutation := newPropertyMutation(c.config, OpUpdateOne, withProperty(pr))
	return &PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PropertyClient) UpdateOneID(id int) *PropertyUpdateOne {
	mutation := newPropertyMutation(c.config, OpUpdateOne, withPropertyID(id))
	return &PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Property.
func (c *PropertyClient) Delete() *PropertyDelete {
	mutation := newPropertyMutation(c.config, OpDelete)
	return &PropertyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PropertyClient) DeleteOne(pr *Property) *PropertyDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PropertyClient) DeleteOneID(id int) *PropertyDeleteOne {
	builder := c.Delete().Where(property.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PropertyDeleteOne{builder}
}

// Create returns a query builder for Property.
func (c *PropertyClient) Query() *PropertyQuery {
	return &PropertyQuery{config: c.config}
}

// Get returns a Property entity by its id.
func (c *PropertyClient) Get(ctx context.Context, id int) (*Property, error) {
	return c.Query().Where(property.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PropertyClient) GetX(ctx context.Context, id int) *Property {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QueryType queries the type edge of a Property.
func (c *PropertyClient) QueryType(pr *Property) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, property.TypeTable, property.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PropertyClient) Hooks() []Hook {
	return c.hooks.Property
}

// PropertyTypeClient is a client for the PropertyType schema.
type PropertyTypeClient struct {
	config
}

// NewPropertyTypeClient returns a client for the PropertyType from the given config.
func NewPropertyTypeClient(c config) *PropertyTypeClient {
	return &PropertyTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `propertytype.Hooks(f(g(h())))`.
func (c *PropertyTypeClient) Use(hooks ...Hook) {
	c.hooks.PropertyType = append(c.hooks.PropertyType, hooks...)
}

// Create returns a create builder for PropertyType.
func (c *PropertyTypeClient) Create() *PropertyTypeCreate {
	mutation := newPropertyTypeMutation(c.config, OpCreate)
	return &PropertyTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of PropertyType entities.
func (c *PropertyTypeClient) CreateBulk(builders ...*PropertyTypeCreate) *PropertyTypeCreateBulk {
	return &PropertyTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PropertyType.
func (c *PropertyTypeClient) Update() *PropertyTypeUpdate {
	mutation := newPropertyTypeMutation(c.config, OpUpdate)
	return &PropertyTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PropertyTypeClient) UpdateOne(pt *PropertyType) *PropertyTypeUpdateOne {
	mutation := newPropertyTypeMutation(c.config, OpUpdateOne, withPropertyType(pt))
	return &PropertyTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PropertyTypeClient) UpdateOneID(id int) *PropertyTypeUpdateOne {
	mutation := newPropertyTypeMutation(c.config, OpUpdateOne, withPropertyTypeID(id))
	return &PropertyTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PropertyType.
func (c *PropertyTypeClient) Delete() *PropertyTypeDelete {
	mutation := newPropertyTypeMutation(c.config, OpDelete)
	return &PropertyTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PropertyTypeClient) DeleteOne(pt *PropertyType) *PropertyTypeDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PropertyTypeClient) DeleteOneID(id int) *PropertyTypeDeleteOne {
	builder := c.Delete().Where(propertytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PropertyTypeDeleteOne{builder}
}

// Create returns a query builder for PropertyType.
func (c *PropertyTypeClient) Query() *PropertyTypeQuery {
	return &PropertyTypeQuery{config: c.config}
}

// Get returns a PropertyType entity by its id.
func (c *PropertyTypeClient) Get(ctx context.Context, id int) (*PropertyType, error) {
	return c.Query().Where(propertytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PropertyTypeClient) GetX(ctx context.Context, id int) *PropertyType {
	pt, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pt
}

// QueryProperties queries the properties edge of a PropertyType.
func (c *PropertyTypeClient) QueryProperties(pt *PropertyType) *PropertyQuery {
	query := &PropertyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertytype.Table, propertytype.FieldID, id),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, propertytype.PropertiesTable, propertytype.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PropertyTypeClient) Hooks() []Hook {
	return c.hooks.PropertyType
}

// ResourceClient is a client for the Resource schema.
type ResourceClient struct {
	config
}

// NewResourceClient returns a client for the Resource from the given config.
func NewResourceClient(c config) *ResourceClient {
	return &ResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resource.Hooks(f(g(h())))`.
func (c *ResourceClient) Use(hooks ...Hook) {
	c.hooks.Resource = append(c.hooks.Resource, hooks...)
}

// Create returns a create builder for Resource.
func (c *ResourceClient) Create() *ResourceCreate {
	mutation := newResourceMutation(c.config, OpCreate)
	return &ResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Resource entities.
func (c *ResourceClient) CreateBulk(builders ...*ResourceCreate) *ResourceCreateBulk {
	return &ResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Resource.
func (c *ResourceClient) Update() *ResourceUpdate {
	mutation := newResourceMutation(c.config, OpUpdate)
	return &ResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResourceClient) UpdateOne(r *Resource) *ResourceUpdateOne {
	mutation := newResourceMutation(c.config, OpUpdateOne, withResource(r))
	return &ResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResourceClient) UpdateOneID(id int) *ResourceUpdateOne {
	mutation := newResourceMutation(c.config, OpUpdateOne, withResourceID(id))
	return &ResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Resource.
func (c *ResourceClient) Delete() *ResourceDelete {
	mutation := newResourceMutation(c.config, OpDelete)
	return &ResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ResourceClient) DeleteOne(r *Resource) *ResourceDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ResourceClient) DeleteOneID(id int) *ResourceDeleteOne {
	builder := c.Delete().Where(resource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResourceDeleteOne{builder}
}

// Create returns a query builder for Resource.
func (c *ResourceClient) Query() *ResourceQuery {
	return &ResourceQuery{config: c.config}
}

// Get returns a Resource entity by its id.
func (c *ResourceClient) Get(ctx context.Context, id int) (*Resource, error) {
	return c.Query().Where(resource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResourceClient) GetX(ctx context.Context, id int) *Resource {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryPool queries the pool edge of a Resource.
func (c *ResourceClient) QueryPool(r *Resource) *ResourcePoolQuery {
	query := &ResourcePoolQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resource.Table, resource.FieldID, id),
			sqlgraph.To(resourcepool.Table, resourcepool.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resource.PoolTable, resource.PoolColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProperties queries the properties edge of a Resource.
func (c *ResourceClient) QueryProperties(r *Resource) *PropertyQuery {
	query := &PropertyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resource.Table, resource.FieldID, id),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resource.PropertiesTable, resource.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResourceClient) Hooks() []Hook {
	return c.hooks.Resource
}

// ResourcePoolClient is a client for the ResourcePool schema.
type ResourcePoolClient struct {
	config
}

// NewResourcePoolClient returns a client for the ResourcePool from the given config.
func NewResourcePoolClient(c config) *ResourcePoolClient {
	return &ResourcePoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resourcepool.Hooks(f(g(h())))`.
func (c *ResourcePoolClient) Use(hooks ...Hook) {
	c.hooks.ResourcePool = append(c.hooks.ResourcePool, hooks...)
}

// Create returns a create builder for ResourcePool.
func (c *ResourcePoolClient) Create() *ResourcePoolCreate {
	mutation := newResourcePoolMutation(c.config, OpCreate)
	return &ResourcePoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ResourcePool entities.
func (c *ResourcePoolClient) CreateBulk(builders ...*ResourcePoolCreate) *ResourcePoolCreateBulk {
	return &ResourcePoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResourcePool.
func (c *ResourcePoolClient) Update() *ResourcePoolUpdate {
	mutation := newResourcePoolMutation(c.config, OpUpdate)
	return &ResourcePoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResourcePoolClient) UpdateOne(rp *ResourcePool) *ResourcePoolUpdateOne {
	mutation := newResourcePoolMutation(c.config, OpUpdateOne, withResourcePool(rp))
	return &ResourcePoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResourcePoolClient) UpdateOneID(id int) *ResourcePoolUpdateOne {
	mutation := newResourcePoolMutation(c.config, OpUpdateOne, withResourcePoolID(id))
	return &ResourcePoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResourcePool.
func (c *ResourcePoolClient) Delete() *ResourcePoolDelete {
	mutation := newResourcePoolMutation(c.config, OpDelete)
	return &ResourcePoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ResourcePoolClient) DeleteOne(rp *ResourcePool) *ResourcePoolDeleteOne {
	return c.DeleteOneID(rp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ResourcePoolClient) DeleteOneID(id int) *ResourcePoolDeleteOne {
	builder := c.Delete().Where(resourcepool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResourcePoolDeleteOne{builder}
}

// Create returns a query builder for ResourcePool.
func (c *ResourcePoolClient) Query() *ResourcePoolQuery {
	return &ResourcePoolQuery{config: c.config}
}

// Get returns a ResourcePool entity by its id.
func (c *ResourcePoolClient) Get(ctx context.Context, id int) (*ResourcePool, error) {
	return c.Query().Where(resourcepool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResourcePoolClient) GetX(ctx context.Context, id int) *ResourcePool {
	rp, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return rp
}

// QueryResourceType queries the resource_type edge of a ResourcePool.
func (c *ResourcePoolClient) QueryResourceType(rp *ResourcePool) *ResourceTypeQuery {
	query := &ResourceTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcepool.Table, resourcepool.FieldID, id),
			sqlgraph.To(resourcetype.Table, resourcetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcepool.ResourceTypeTable, resourcepool.ResourceTypeColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLabels queries the labels edge of a ResourcePool.
func (c *ResourcePoolClient) QueryLabels(rp *ResourcePool) *LabelQuery {
	query := &LabelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcepool.Table, resourcepool.FieldID, id),
			sqlgraph.To(label.Table, label.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcepool.LabelsTable, resourcepool.LabelsColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClaims queries the claims edge of a ResourcePool.
func (c *ResourcePoolClient) QueryClaims(rp *ResourcePool) *ResourceQuery {
	query := &ResourceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcepool.Table, resourcepool.FieldID, id),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resourcepool.ClaimsTable, resourcepool.ClaimsColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResourcePoolClient) Hooks() []Hook {
	return c.hooks.ResourcePool
}

// ResourceTypeClient is a client for the ResourceType schema.
type ResourceTypeClient struct {
	config
}

// NewResourceTypeClient returns a client for the ResourceType from the given config.
func NewResourceTypeClient(c config) *ResourceTypeClient {
	return &ResourceTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resourcetype.Hooks(f(g(h())))`.
func (c *ResourceTypeClient) Use(hooks ...Hook) {
	c.hooks.ResourceType = append(c.hooks.ResourceType, hooks...)
}

// Create returns a create builder for ResourceType.
func (c *ResourceTypeClient) Create() *ResourceTypeCreate {
	mutation := newResourceTypeMutation(c.config, OpCreate)
	return &ResourceTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ResourceType entities.
func (c *ResourceTypeClient) CreateBulk(builders ...*ResourceTypeCreate) *ResourceTypeCreateBulk {
	return &ResourceTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResourceType.
func (c *ResourceTypeClient) Update() *ResourceTypeUpdate {
	mutation := newResourceTypeMutation(c.config, OpUpdate)
	return &ResourceTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResourceTypeClient) UpdateOne(rt *ResourceType) *ResourceTypeUpdateOne {
	mutation := newResourceTypeMutation(c.config, OpUpdateOne, withResourceType(rt))
	return &ResourceTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResourceTypeClient) UpdateOneID(id int) *ResourceTypeUpdateOne {
	mutation := newResourceTypeMutation(c.config, OpUpdateOne, withResourceTypeID(id))
	return &ResourceTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResourceType.
func (c *ResourceTypeClient) Delete() *ResourceTypeDelete {
	mutation := newResourceTypeMutation(c.config, OpDelete)
	return &ResourceTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ResourceTypeClient) DeleteOne(rt *ResourceType) *ResourceTypeDeleteOne {
	return c.DeleteOneID(rt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ResourceTypeClient) DeleteOneID(id int) *ResourceTypeDeleteOne {
	builder := c.Delete().Where(resourcetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResourceTypeDeleteOne{builder}
}

// Create returns a query builder for ResourceType.
func (c *ResourceTypeClient) Query() *ResourceTypeQuery {
	return &ResourceTypeQuery{config: c.config}
}

// Get returns a ResourceType entity by its id.
func (c *ResourceTypeClient) Get(ctx context.Context, id int) (*ResourceType, error) {
	return c.Query().Where(resourcetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResourceTypeClient) GetX(ctx context.Context, id int) *ResourceType {
	rt, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return rt
}

// QueryPropertyTypes queries the property_types edge of a ResourceType.
func (c *ResourceTypeClient) QueryPropertyTypes(rt *ResourceType) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcetype.Table, resourcetype.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resourcetype.PropertyTypesTable, resourcetype.PropertyTypesColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPools queries the pools edge of a ResourceType.
func (c *ResourceTypeClient) QueryPools(rt *ResourceType) *ResourcePoolQuery {
	query := &ResourcePoolQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcetype.Table, resourcetype.FieldID, id),
			sqlgraph.To(resourcepool.Table, resourcepool.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resourcetype.PoolsTable, resourcetype.PoolsColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResourceTypeClient) Hooks() []Hook {
	return c.hooks.ResourceType
}
