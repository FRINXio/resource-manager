// Code generated by entc, DO NOT EDIT.

package resourcepool

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the resourcepool type in the database.
	Label = "resource_pool"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPoolType holds the string denoting the pool_type field in the database.
	FieldPoolType = "pool_type"

	// EdgeResourceType holds the string denoting the resource_type edge name in mutations.
	EdgeResourceType = "resource_type"
	// EdgeLabels holds the string denoting the labels edge name in mutations.
	EdgeLabels = "labels"
	// EdgeClaims holds the string denoting the claims edge name in mutations.
	EdgeClaims = "claims"

	// Table holds the table name of the resourcepool in the database.
	Table = "resource_pools"
	// ResourceTypeTable is the table the holds the resource_type relation/edge.
	ResourceTypeTable = "resource_pools"
	// ResourceTypeInverseTable is the table name for the ResourceType entity.
	// It exists in this package in order to avoid circular dependency with the "resourcetype" package.
	ResourceTypeInverseTable = "resource_types"
	// ResourceTypeColumn is the table column denoting the resource_type relation/edge.
	ResourceTypeColumn = "resource_type_pools"
	// LabelsTable is the table the holds the labels relation/edge.
	LabelsTable = "resource_pools"
	// LabelsInverseTable is the table name for the Label entity.
	// It exists in this package in order to avoid circular dependency with the "label" package.
	LabelsInverseTable = "labels"
	// LabelsColumn is the table column denoting the labels relation/edge.
	LabelsColumn = "label_pools"
	// ClaimsTable is the table the holds the claims relation/edge.
	ClaimsTable = "resources"
	// ClaimsInverseTable is the table name for the Resource entity.
	// It exists in this package in order to avoid circular dependency with the "resource" package.
	ClaimsInverseTable = "resources"
	// ClaimsColumn is the table column denoting the claims relation/edge.
	ClaimsColumn = "resource_pool_claims"
)

// Columns holds all SQL columns for resourcepool fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPoolType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the ResourcePool type.
var ForeignKeys = []string{
	"label_pools",
	"resource_type_pools",
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// PoolType defines the type for the pool_type enum field.
type PoolType string

// PoolType values.
const (
	PoolTypeSet       PoolType = "set"
	PoolTypeSingleton PoolType = "singleton"
)

func (pt PoolType) String() string {
	return string(pt)
}

// PoolTypeValidator is a validator for the "pool_type" field enum values. It is called by the builders before save.
func PoolTypeValidator(pt PoolType) error {
	switch pt {
	case PoolTypeSet, PoolTypeSingleton:
		return nil
	default:
		return fmt.Errorf("resourcepool: invalid enum value for pool_type field: %q", pt)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (pt PoolType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(pt.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (pt *PoolType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", v)
	}
	*pt = PoolType(str)
	if err := PoolTypeValidator(*pt); err != nil {
		return fmt.Errorf("%s is not a valid PoolType", str)
	}
	return nil
}
